{"version":3,"sources":["webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue?4950","webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue","webpack:///./src/apps/LOS/views/Reports/TestResultsReport.vue?38ab"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","title","period","rows","fields","columns","canExportCsv","canExportPDf","reportReady","onReportConfiguration","onPeriod","mixins","ReportMixin","components","ReportTemplate","data","cohort","reportType","patientLevelColumns","thTxt","disaggregatedColumns","created","this","report","getFormFields","methods","type","tests","getDateIntervalPeriod","value","setDisaggregatedRows","setPatientLevelRows","getDateDurationFields","id","helpText","TT_MULTIPLE_SELECT","options","_","x","config","setStartDate","start_date","setEndDate","end_date","getLabResultsReport","availableTests","buildAvailableTests","buildAvailableTestOptions","TT_SELECT","label","results","forEach","result","measures","measure","name","push","patient_id","arv","arv_number","gender","ageGroup","age_group","birthdate","toDate","ordered","order_date","specimen","test","modifier","released","result_date","length","other","males","females","concat","map","i","ageGroupIndex","group","maleRow","td","femaleRow","filterByGender","filter","drill","d","tdDate","__exports__"],"mappings":"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","file":"js/chunk-2d226ccc.3b634fa1.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: true,\n    canExportPDf: true,\n    reportReady: _ctx.reportReady,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"reportReady\", \"onReportConfiguration\"]))\n}","\r\nimport { defineComponent } from 'vue'\r\nimport { LabReportService } from \"@/apps/ART/services/reports/lab_report_service\"\r\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\r\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\r\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\r\nimport { FieldType } from '@/components/Forms/BaseFormElements'\r\nimport { Field } from '@/components/Forms/FieldInterface'\r\nimport { Option } from '@/components/Forms/FieldInterface'\r\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\r\n\r\nexport default defineComponent({\r\n    mixins: [ReportMixin],\r\n    components: { ReportTemplate },\r\n    data: () => ({\r\n        title: 'Lab test result(s)',\r\n        rows: [] as Array<any>,\r\n        cohort: [] as Array<any>,\r\n        reportType: '' as string,\r\n        reportReady: false as boolean,\r\n        columns: [] as Array<any>,\r\n        patientLevelColumns:[ \r\n            [\r\n                table.thTxt('ARV#'), \r\n                table.thTxt('Gender'), \r\n                table.thTxt('Birthdate'), \r\n                table.thTxt('Ordered'), \r\n                table.thTxt('Specimen'), \r\n                table.thTxt('Test'), \r\n                table.thTxt('Result'), \r\n                table.thTxt('Released')\r\n            ]\r\n        ],\r\n        disaggregatedColumns: [\r\n            table.thTxt('Age group'), \r\n            table.thTxt('Gender')\r\n        ]\r\n    }),\r\n    created() {\r\n        this.report = new LabReportService()\r\n        this.fields = this.getFormFields()\r\n    },\r\n    methods: {\r\n        async onPeriod({type, tests}: any) {\r\n            this.reportReady = true\r\n            this.rows = []\r\n            this.period = this.report.getDateIntervalPeriod()\r\n            this.reportType = type.value\r\n            if (this.reportType === 'disaggregated') {\r\n                this.setDisaggregatedRows(tests)\r\n            } else if (this.reportType === 'patient_level') {\r\n                this.setPatientLevelRows(tests)\r\n            }\r\n        },\r\n        getFormFields(): Array<Field> {\r\n            return [\r\n                ...this.getDateDurationFields(),\r\n                {\r\n                    id: 'tests',\r\n                    helpText: 'Available test(s) results',\r\n                    type: FieldType.TT_MULTIPLE_SELECT,\r\n                    options: async (_: any, x: any, config: any) => {\r\n                        this.report.setStartDate(config.start_date)\r\n                        this.report.setEndDate(config.end_date)\r\n                        const data = await this.report.getLabResultsReport()\r\n                        const availableTests = this.buildAvailableTests(data)\r\n                        return this.buildAvailableTestOptions(availableTests)\r\n                    } \r\n                },\r\n                {\r\n                    id: 'type',\r\n                    helpText: 'Select report type',\r\n                    type: FieldType.TT_SELECT,\r\n                    options: () => [\r\n                        {\r\n                            label: 'Disaggregated',\r\n                            value: 'disaggregated',\r\n                        },\r\n                        {\r\n                            label: 'Patient level',\r\n                            value: 'patient_level',\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        buildAvailableTests(results: any) {\r\n            const tests: Record<string, any> = {}\r\n            results.forEach((result: any) => {\r\n                result.measures.forEach((measure: any) => {\r\n                    if (!(measure.name in tests)) {\r\n                        tests[measure.name] = []\r\n                    }\r\n                    tests[measure.name].push({\r\n                        id: result.patient_id,\r\n                        arv: result.arv_number,\r\n                        gender: result.gender,\r\n                        ageGroup: result.age_group,\r\n                        birthdate: this.toDate(result.birthdate),\r\n                        ordered: this.toDate(result.order_date),\r\n                        specimen: result.test,\r\n                        test:  measure.name,\r\n                        result: `${measure.modifier} ${measure.value}`,\r\n                        released: this.toDate(result.result_date)\r\n                    })\r\n                })\r\n            })\r\n            return tests\r\n        },\r\n        buildAvailableTestOptions(availableTests: Record<string, any>) {\r\n            const options: Array<Option> = []\r\n            for(const test in availableTests) {\r\n                const result = availableTests[test]\r\n                options.push({\r\n                    label: test,\r\n                    value: result.length,\r\n                    other: result\r\n                })\r\n            }\r\n            return options\r\n        },\r\n        setDisaggregatedRows(results: Array<Option>) {\r\n            const males = []\r\n            const females = []\r\n            this.columns = [this.disaggregatedColumns.concat(results.map((i: any) => table.thTxt(i.label)))]\r\n            for(const ageGroupIndex in AGE_GROUPS) {\r\n                const group = AGE_GROUPS[ageGroupIndex]\r\n                const maleRow: any = [table.td(group), table.td('M')]\r\n                const femaleRow: any = [table.td(group), table.td('F')]\r\n                results.forEach(({other}: Option) => {\r\n                    const filterByGender = (gender: 'F' | 'M') => {\r\n                        return other.filter((i: any) => i.gender === gender && i.ageGroup === group)\r\n                                    .map((i: any) => i.id)\r\n                    }\r\n                    maleRow.push(this.drill(filterByGender('M')))\r\n                    femaleRow.push(this.drill(filterByGender('F')))\r\n                })\r\n                males.push(maleRow)\r\n                females.push(femaleRow)\r\n                this.rows = [...females, ...males]\r\n            }\r\n        },\r\n        setPatientLevelRows(results: Array<Option>) {\r\n            this.columns = [this.patientLevelColumns]\r\n            results.forEach(({other}: Option)  => {\r\n                other.forEach((d: any) => {\r\n                    this.rows.push([\r\n                        table.td(d.arv),\r\n                        table.td(d.gender),\r\n                        table.tdDate(d.birthdate),\r\n                        table.tdDate(d.ordered),\r\n                        table.td(d.specimen),\r\n                        table.td(d.test),\r\n                        table.td(d.result),\r\n                        table.tdDate(d.released)\r\n                    ])\r\n                })\r\n            })\r\n        }\r\n    }\r\n})\r\n","import { render } from \"./TestResultsReport.vue?vue&type=template&id=3b5a0384&ts=true\"\nimport script from \"./TestResultsReport.vue?vue&type=script&lang=ts\"\nexport * from \"./TestResultsReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}