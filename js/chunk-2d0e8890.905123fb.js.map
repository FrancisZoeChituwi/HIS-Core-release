{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?0388","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?a5e9"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","activeField","onFinishAction","onFinish","skipSummary","onOnIndex","$event","cancelDestinationPath","cancelDestination","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","items","prepDrugs","postItems","f","$router","push","getFields","id","helpText","type","TT_BARCODE","config","hiddenFooterBtns","onValue","TT_MULTIPLE_SELECT","requireNext","validation","val","required","options","unload","footerBtns","name","slot","onClick","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","beforeNext","_","c","currentFieldContext","drugsToStr","map","b","i","label","join","drugsWithoutBatches","filter","drug","entries","d","tins","expiry","batchNumber","every","Boolean","partialBatches","e","score","some","partialDrugs","batchlessDrugs","v","TT_TABLE_VIEWER","buildResults","enter_batches","columns","rows","j","value","shortName","tabs","toStandardHisDisplayFormat","other","formdata","this","forEach","el","element","drugID","parseInt","date","listData","l","isChecked","formatDrugs","drugList","created","__exports__"],"mappings":"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","file":"js/chunk-2d0e8890.905123fb.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.activeField='')),\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\r\nimport { defineComponent } from \"vue\";\r\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\r\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\r\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\r\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\r\nimport HisDate from \"@/utils/Date\";\r\nimport { StockService } from \"./stock_service\";\r\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nexport default defineComponent({\r\n  components: { HisStandardForm },\r\n  data: () => ({\r\n    activeField: \"\",\r\n    fields: [] as any,\r\n    drugs: [] as any,\r\n    selectedDrugs: [] as any,\r\n    barcode: \"\",\r\n    stockService: {} as any,\r\n  }),\r\n\r\n  methods: {\r\n    async onFinish(formData: any) {\r\n      const items = this.prepDrugs(formData);\r\n      const f = await this.stockService.postItems(items);\r\n      if (f) {\r\n        toastSuccess(\"Stock succesfully added\");\r\n        this.$router.push(\"/\");\r\n      } else {\r\n        toastDanger(\"Could not save stock\");\r\n      }\r\n    },\r\n    getFields(): Array<Field> {\r\n      return [\r\n        {\r\n          id: \"barcode\",\r\n          helpText: \"Scan barcode\",\r\n          type: FieldType.TT_BARCODE,\r\n\r\n          config: {\r\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\r\n          },\r\n          onValue: async (id: string) => {\r\n            this.barcode = id;\r\n            this.activeField = \"select drugs\";\r\n          },\r\n        },\r\n        {\r\n          id: \"select drugs\",\r\n          helpText: \"Select drugs\",\r\n          type: FieldType.TT_MULTIPLE_SELECT,\r\n          requireNext: true,\r\n          validation: (val: any) => Validation.required(val),\r\n          options: () => this.drugs,\r\n          unload: (val: any) => (this.selectedDrugs = val),\r\n          config: {\r\n            footerBtns: [\r\n              {\r\n                name: \"Select all\",\r\n                slot: \"end\",\r\n                onClick: () => {\r\n                  this.selectAll(this.drugs);\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n        {\r\n          id: \"date\",\r\n          helpText: \"Delivery Date\",\r\n          type: FieldType.TT_FULL_DATE,\r\n          validation: (val: Option) => Validation.required(val),\r\n        },\r\n        {\r\n          id: \"enter_batches\",\r\n          helpText: \"Batch entry\",\r\n          type: FieldType.TT_BATCH_ENTRY,\r\n          options: () => this.selectedDrugs,\r\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\r\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\r\n            const drugsWithoutBatches = currentFieldContext.drugs.filter((drug: any) =>\r\n              drug.entries.map((d: any) => !d.tins && !d.expiry && !d.batchNumber).every(Boolean)\r\n            )\r\n            const partialBatches = currentFieldContext.drugs.filter((drug: any) => {\r\n              return drug.entries.map((e: any) => {\r\n                let score = 0\r\n                if (e.tins) score += 1\r\n                if (e.expiry) score += 1\r\n                if (e.batchNumber) score += 1\r\n                return score >= 1 && score <= 2 \r\n              }).some(Boolean)\r\n            })\r\n            if (!isEmpty(partialBatches)) {\r\n              const partialDrugs = drugsToStr(partialBatches)\r\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\r\n              return false\r\n            }\r\n            if (!isEmpty(drugsWithoutBatches)) {\r\n              const batchlessDrugs = drugsToStr(drugsWithoutBatches)\r\n              toastWarning(`The following drug batches are empty: ${batchlessDrugs}`)\r\n              return false\r\n            }\r\n            return true\r\n          },\r\n          validation: (v: Option) => Validation.required(v)\r\n        },\r\n        {\r\n          id: \"adherence_report\",\r\n          helpText: \"Summary\",\r\n          type: FieldType.TT_TABLE_VIEWER,\r\n          options: (d: any) => this.buildResults(d.enter_batches),\r\n          config: {\r\n            hiddenFooterBtns: [\"Clear\"],\r\n          },\r\n        },\r\n      ];\r\n    },\r\n    buildResults(d: any) {\r\n      const columns = [\r\n        \"Drug\",\r\n        \"Amount per unit\",\r\n        \"Total units\",\r\n        \"Expiry date\",\r\n        \"Batch number\",\r\n      ];\r\n      const rows = d.map((j: any) => {\r\n        const d = j.value;\r\n        return [\r\n          d.shortName,\r\n          d.tabs,\r\n          d.tins,\r\n          HisDate.toStandardHisDisplayFormat(d.expiry),\r\n          d.batchNumber,\r\n        ];\r\n      });\r\n      return [\r\n        {\r\n          label: \"Confirm entry\",\r\n          value: \"Table\",\r\n          other: { columns, rows },\r\n        },\r\n      ];\r\n    },\r\n    prepDrugs(formdata: any) {\r\n      const items: any[] = [];\r\n      const barcode = this.barcode;\r\n      formdata.enter_batches.forEach((el: any) => {\r\n        const element = el.value;\r\n        items.push({\r\n          'batch_number': element.batchNumber,\r\n          items: [\r\n            {\r\n              'barcode': barcode,\r\n              'drug_id': element.drugID,\r\n              'expiry_date': element.expiry,\r\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\r\n              'delivery_date': formdata.date.value,\r\n            },\r\n          ],\r\n        });\r\n      });\r\n      return items;\r\n    },\r\n    selectAll(listData: Array<Option>) {\r\n      return listData.map((l) => {\r\n        l.isChecked = true;\r\n        return l;\r\n      });\r\n    },\r\n    formatDrugs() {\r\n      return this.stockService.drugList().map((drug: any) => {\r\n        return {\r\n          label: drug.shortName,\r\n          value: drug,\r\n        };\r\n      });\r\n    },\r\n  },\r\n  created() {\r\n    this.stockService = new StockService();\r\n    this.fields = this.getFields();\r\n    this.drugs = this.formatDrugs();\r\n  },\r\n});\r\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=186ddd8f&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}