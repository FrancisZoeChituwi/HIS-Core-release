{"version":3,"sources":["webpack:///./src/apps/ART/views/FilingNumberManagement.vue?a27f","webpack:///./src/apps/ART/services/filing_number_service.ts","webpack:///./src/apps/ART/views/FilingNumberManagement.vue","webpack:///./src/apps/ART/views/FilingNumberManagement.vue?6675"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","skipSummary","activeField","fieldComponent","onOnIndex","$event","fields","patientID","activePrefix","dormantPrefix","this","num","prefix","search","substring","length","get","prx","split","filingNumber","match","RegExp","postJson","getJson","req","identifier","res","map","person","patient","getID","getGivenName","getFamilyName","secondaryPatient","page","pageSize","printer","printLbl","components","HisStandardForm","data","service","nextWorkflowRouteName","filingNumberAssignment","watch","handler","query","params","patient_id","setPatientID","getPatient","loadFilingPrefix","getFilingNumberField","getCandidateSelectionField","getFilingNumberHistoryField","archive","archiveFilingNumber","assign","onAssignFilingNumber","trail","next_workflow_task","immediate","deep","methods","toFID","filingID","formatNumber","newFilingNumber","assigned","assignment","primary","label","value","name","other","activeNumber","dormantNumber","archived","isActiveFilingNum","presentLoading","assignFilingNumber","dismiss","new_identifier","isDormantFilingNum","archived_identifier","swapExistingFilingNumbers","candidate","archivePatient","swapped","active_number","given_name","family_name","dormant_number","message","create","backdropDismiss","loading","present","findByID","_patient","id","getFilingNumber","printFilingNumber","$router","back","filingNumberSearchKeypad","component","cssClass","componentProps","title","strictNumbers","onKeyPress","modal","onDidDismiss","getArchivingCandidates","pageNumber","candidates","formatCandidateOptions","state","list","style","color","fontWeight","toStandardHisDisplayFormat","appointment_date","type","TT_TABLE_VIEWER","helpText","condition","options","columns","getPastFilingNumbers","rows","d","isActive","voided","date_created","date_voided","config","toolbarInfo","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","selectorInstance","filingNumbeSearchTerm","filingOptionsBackup","TT_CARD_SELECTOR","validation","val","required","onload","instance","onValue","ok","listData","filingNumbers","disabled","TT_FILING_NUMBER_VIEW","dormantPatient","push","getPatientID","getNextTaskParams","nextTask","__exports__"],"mappings":"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","file":"js/chunk-2d0aaf0b.bef36142.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    fields: _ctx.fields\n  }, null, 8, [\"activeField\", \"fields\"]))\n}","import { Service } from \"@/services/service\";\r\nimport { PrintoutService } from \"@/services/printout_service\";\r\nimport { GlobalPropertyService } from \"@/services/global_property_service\";\r\nimport { Patientservice } from \"@/services/patient_service\";\r\n\r\nexport class FilingNumberService extends Service {\r\n    patientID: number;\r\n    activePrefix: string;\r\n    dormantPrefix: string;\r\n\r\n    constructor() {\r\n        super()\r\n        this.patientID = 0\r\n        this.activePrefix = ''\r\n        this.dormantPrefix = ''\r\n    }\r\n\r\n    getActivePrx() {\r\n        return this.activePrefix\r\n    }\r\n\r\n    getDormantPrx() {\r\n        return this.dormantPrefix\r\n    }\r\n\r\n    getPatientID() {\r\n        return this.patientID\r\n    }\r\n\r\n    setPatientID(patientID: number) {\r\n        this.patientID = patientID\r\n    }\r\n\r\n    formatNumber(num: string) {\r\n        const prefix = num.search(this.activePrefix) >= 0 \r\n            ? this.activePrefix\r\n            : num.search(this.dormantPrefix) >= 0 \r\n            ? this.dormantPrefix\r\n            : ''\r\n        return prefix ? num.substring(prefix.length, num.length) : num\r\n    }\r\n\r\n    async loadFilingPrefix() {\r\n        const prx = await GlobalPropertyService.get('filing.number.prefix')\r\n        if (prx) {\r\n            const [activePrefix, dormantPrefix] = prx.split(',')\r\n            this.activePrefix = activePrefix\r\n            this.dormantPrefix = dormantPrefix\r\n        }\r\n    }\r\n\r\n    isActiveFilingNum(filingNumber: string) {\r\n        return filingNumber.match(new RegExp(this.activePrefix, 'i'))\r\n            ? true\r\n            : false\r\n    }\r\n\r\n    isDormantFilingNum(filingNumber: string) {\r\n        return filingNumber.match(new RegExp(this.dormantPrefix, 'i'))\r\n            ? true\r\n            : false\r\n    }\r\n\r\n    async assignFilingNumber() {\r\n        return Service.postJson(`patients/${this.patientID}/filing_number`, {})\r\n    }\r\n\r\n    async canUseFilingNumber() {\r\n        const req = await Service.getJson('filing_number/type=activate')\r\n        if (req && req['use.filing.numbers'] === 'true') {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    async getFilingNumber(filingNumber: string) {\r\n        const identifier = `${this.activePrefix}${filingNumber}`\r\n        const res = await Service.getJson(`search/patients/by_identifier`, {\r\n            'type_id': 17, \r\n            'identifier': identifier\r\n        })\r\n        if (res) {\r\n            return res.map((person: any) => {\r\n                const patient = new Patientservice(person)\r\n                return {\r\n                    identifier,\r\n                    'patient_id': patient.getID(),\r\n                    'given_name': patient.getGivenName(),\r\n                    'family_name': patient.getFamilyName(),\r\n                    'state': 'N/A',\r\n                    'appointment_date': ''\r\n                }\r\n            })\r\n        }\r\n        return []\r\n    }\r\n\r\n    archiveFilingNumber() {\r\n        return Service.getJson(`archive_active_filing_number`, {\r\n            'patient_id': this.patientID\r\n        })\r\n    }\r\n\r\n    archivePatient(secondaryPatient: number, identifier: string | number) {\r\n        return Service.postJson('swap_active_number', {\r\n            'primary_patient_id': this.patientID,\r\n            'secondary_patient_id': secondaryPatient,\r\n            identifier\r\n        })\r\n    }\r\n\r\n    getArchivingCandidates(page=0, pageSize=10) {\r\n        return Service.getJson(`archiving_candidates`, {\r\n            page,'page_size': pageSize\r\n        })\r\n    }\r\n\r\n    getPastFilingNumbers() {\r\n        return Service.getJson(`patients/${this.patientID}/past_filing_numbers`)\r\n    }\r\n\r\n    printFilingNumber() {\r\n        const printer = new PrintoutService()\r\n        return printer.printLbl(`patients/${this.patientID}/labels/filing_number`) \r\n    }\r\n}","\r\nimport { defineComponent } from 'vue'\r\nimport { isEmpty } from 'lodash';\r\nimport { Field, Option } from '@/components/Forms/FieldInterface';\r\nimport { FieldType } from '@/components/Forms/BaseFormElements';\r\nimport { loadingController, modalController } from \"@ionic/vue\"\r\nimport { Patientservice } from '@/services/patient_service';\r\nimport { FilingNumberService } from '@/apps/ART/services/filing_number_service'\r\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\r\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\r\nimport { alertConfirmation, toastDanger, toastWarning  } from \"@/utils/Alerts\"\r\nimport HisDate from \"@/utils/Date\"\r\nimport Keypad from \"@/components/Keyboard/HisKeypad.vue\"\r\nimport { WorkflowService } from \"@/services/workflow_service\"\r\n\r\n/**\r\n * Manages filing number assignment\r\n * Can view filing number trail\r\n * Can swap filing numbers between candidates\r\n */\r\nexport default defineComponent({\r\n    components: { HisStandardForm },\r\n    data: () => ({\r\n        service: {} as any,\r\n        patient: {} as any,\r\n        fieldComponent: '' as string,\r\n        fields: [] as Array<Field>,\r\n        nextWorkflowRouteName: '' as string,\r\n        filingNumberAssignment: {} as Record<string, Option>,\r\n    }),\r\n    watch: {\r\n        /**\r\n         * Initiates service and Detects parameters \r\n         * in the url and switch to appropriate actions\r\n         */\r\n        '$route': {\r\n            async handler({query, params}: any) {\r\n                if (params && params.patient_id) {\r\n                    this.service = new FilingNumberService()\r\n                    this.service.setPatientID(params.patient_id)\r\n                    this.patient = await this.getPatient(params.patient_id)\r\n                    await this.service.loadFilingPrefix()\r\n                }\r\n                if (query) {\r\n                    this.fields = [\r\n                        this.getFilingNumberField(),\r\n                        this.getCandidateSelectionField(),\r\n                        this.getFilingNumberHistoryField()\r\n                    ]\r\n                    if (query.archive === \"true\") {\r\n                        await this.archiveFilingNumber()\r\n                        return \r\n                    }\r\n                    if (query.assign === \"true\") {\r\n                        await this.onAssignFilingNumber()\r\n                    }\r\n                    if (query.trail === \"true\") {\r\n                       this.fieldComponent = 'view_filing_history'\r\n                    }\r\n                    if (query.next_workflow_task) {\r\n                        this.nextWorkflowRouteName = query.next_workflow_task\r\n                    }\r\n                }\r\n            },\r\n            immediate: true,\r\n            deep: true\r\n        }\r\n    },\r\n    methods: {\r\n        /**\r\n         * Helper method for formatting filing numbers \r\n         * for display purposes only!\r\n         */\r\n        toFID(filingID: string) {\r\n            return this.service.formatNumber(filingID)\r\n        },\r\n        async onAssignFilingNumber() {\r\n            const assigned = await this.newFilingNumber()\r\n            if (assigned) {\r\n                this.filingNumberAssignment = assigned\r\n                this.fieldComponent = 'filing_number_management'\r\n            } else {\r\n                this.fieldComponent = 'select_candidate_to_swap'\r\n                toastWarning('Out of filing numbers, Please select eligible candidate')\r\n            }\r\n        },\r\n        /**\r\n         * Assigns and creates filing number assignment object\r\n         */\r\n        async newFilingNumber(): Promise<Record<string, Option> | undefined> {\r\n            const assignment: Record<string, Option> = {\r\n                primary: {\r\n                    label: 'Dormant → Active',\r\n                    value: this.patient.name,\r\n                    other: {\r\n                        activeNumber: this.patient.filingID \r\n                            ? this.toFID(this.patient.filingID)\r\n                            : 'N/A', \r\n                        dormantNumber: 'N/A'\r\n                    }\r\n                },\r\n                archived:  {\r\n                    label: 'Active → Dormant',\r\n                    value: 'N/A',\r\n                    other: {\r\n                        activeNumber: 'N/A', \r\n                        dormantNumber: 'N/A'\r\n                    }\r\n                }\r\n            }\r\n            /**\r\n             * Do assign a new filing number if the patient already\r\n             * has one\r\n             */\r\n            if (this.service.isActiveFilingNum(this.patient.filingID)) {\r\n                return assignment\r\n            }\r\n\r\n            await this.presentLoading()\r\n\r\n            const assigned = await this.service.assignFilingNumber()\r\n\r\n            loadingController.dismiss()\r\n\r\n            if (isEmpty(assigned)) return\r\n\r\n            assignment.primary.other = {\r\n                activeNumber: this.toFID(\r\n                    assigned.new_identifier.identifier\r\n                ),\r\n                dormantNumber: this.service\r\n                    .isDormantFilingNum(this.patient.filingID) \r\n                    ? this.toFID(this.patient.filingID)\r\n                    : 'N/A'\r\n            }\r\n\r\n            if (!isEmpty(assigned.archived_identifier)) {\r\n                const patient = await this.getPatient(\r\n                    assigned.archived_identifier.patient_id\r\n                )\r\n                assignment.archived = {\r\n                    label: 'Active → Dormant',\r\n                    value: patient.name,\r\n                    other: {\r\n                        activeNumber: this.toFID(\r\n                            assigned.archived_identifier.identifier\r\n                        ), \r\n                        dormantNumber: this.toFID(\r\n                            assigned.new_identifier.identifier\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            return assignment\r\n        },\r\n        /**\r\n         * Swap filing numbers between an active candidate with a dormant candidate\r\n        */\r\n        async swapExistingFilingNumbers(candidate: any) {\r\n            const swapped = await this.service.archivePatient(\r\n               candidate.patient_id, candidate.identifier\r\n            )\r\n            if (swapped) {\r\n                return {\r\n                    primary: {\r\n                        label: 'Dormant → Active',\r\n                        value: this.patient.name,\r\n                        other: {\r\n                            activeNumber: this.toFID(swapped.active_number), \r\n                            dormantNumber: this.toFID(this.patient.filingID) || 'N/A'\r\n                        }\r\n                    },\r\n                    archived:  {\r\n                        label: 'Active → Dormant',\r\n                        value: `${candidate.given_name} ${candidate.family_name}`,\r\n                        other: {\r\n                            patientID: candidate.patient_id,\r\n                            activeNumber: this.toFID(swapped.dormant_number), \r\n                            dormantNumber:this.toFID(swapped.active_number)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        async presentLoading(message=\"Please wait...\") {\r\n            const loading = await loadingController.create({\r\n                message, backdropDismiss: false\r\n            })\r\n            await loading.present()\r\n        },\r\n        async getPatient(patientID: number): Promise<Record<string, number | string>> {\r\n            const patient = await Patientservice.findByID(patientID)\r\n            if (patient) {\r\n                const _patient = new Patientservice(patient)\r\n                return {\r\n                    id: _patient.getID(),\r\n                    filingID: _patient.getFilingNumber(),\r\n                    name: `${_patient.getGivenName()} ${_patient.getFamilyName()}`\r\n                }\r\n            }\r\n            return {}\r\n        },\r\n        /**\r\n         * Archives currrent patient and routes to the previous page view\r\n         */\r\n        async archiveFilingNumber() {\r\n            await this.presentLoading('Archiving filing number')\r\n            try {\r\n                await this.service.archiveFilingNumber()\r\n                await this.service.printFilingNumber()\r\n            }catch(e) {\r\n                toastDanger(e)\r\n            }\r\n            await loadingController.dismiss()\r\n            this.$router.back()\r\n        },\r\n        async filingNumberSearchKeypad() {\r\n            const modal = await modalController.create({\r\n                component: Keypad,\r\n                backdropDismiss: false,\r\n                cssClass: 'keypad-modal',\r\n                componentProps: {\r\n                    title: 'Find Active number',\r\n                    strictNumbers: false,\r\n                    onKeyPress: () => {\r\n                        //TODO: do nothing!\r\n                    }\r\n                }\r\n            })\r\n            await modal.present()\r\n            const { data } = await modal.onDidDismiss()\r\n            return data\r\n        },\r\n        async getArchivingCandidates(pageNumber=0): Promise<Option[]> {\r\n            const candidates = await this.service.getArchivingCandidates(pageNumber)\r\n            return this.formatCandidateOptions(candidates)\r\n        },\r\n        /**\r\n         * Converts array of objects with candidates to a list options array\r\n         */\r\n        formatCandidateOptions(candidates: Array<any>): Option[] {\r\n            return candidates.map((candidate: any) => ({\r\n                label: `${candidate.given_name} ${candidate.family_name} (${candidate.state})`,\r\n                value: candidate.identifier,\r\n                other: {\r\n                    data: candidate,\r\n                    list: [\r\n                        {\r\n                            label: 'Filing #',\r\n                            value: this.toFID(candidate.identifier),\r\n                            style: {\r\n                                color: 'green', \r\n                                fontWeight: 'bold'\r\n                            }\r\n                        },\r\n                        {\r\n                            label: 'Given name',\r\n                            value: candidate.given_name\r\n                        },\r\n                        {\r\n                            label: 'Family name',\r\n                            value: candidate.family_name\r\n                        },\r\n                        {\r\n                            label: 'Outcome',\r\n                            value: candidate.state.match(/trans/i)\r\n                                ? 'TO'\r\n                                : candidate.state.match(/stop/i) \r\n                                ? 'Tx stopped'\r\n                                : candidate.state\r\n                        },\r\n                        {\r\n                            label: 'LAD',\r\n                            value: HisDate.toStandardHisDisplayFormat(\r\n                                candidate.appointment_date\r\n                            )\r\n                        }\r\n                    ]   \r\n                }\r\n            }))\r\n        },\r\n        /*\r\n        * Form field that a table of all filing numbers assigned to a patient\r\n         */\r\n        getFilingNumberHistoryField(): Field {\r\n            return {\r\n                id: 'view_filing_history',\r\n                type: FieldType.TT_TABLE_VIEWER,\r\n                helpText: 'Filing Number Trail',\r\n                condition: () => false,\r\n                options: async () => {\r\n                    const columns = ['Status', 'Filing #', 'Date Created', 'Date voided']\r\n                    const data = await this.service.getPastFilingNumbers()\r\n                    const rows = data.map((d: any) => {\r\n                        const isActive = d.voided === 0\r\n                        return [\r\n                            isActive ? 'Active' : 'Voided',\r\n                            this.toFID(d.identifier),\r\n                            HisDate.toStandardHisDisplayFormat(d.date_created),\r\n                            !isActive ? HisDate.toStandardHisDisplayFormat(d.date_voided): 'N/A'\r\n                        ]\r\n                    })\r\n                    return [\r\n                        {\r\n                            label: 'Filing Number Trail',\r\n                            value: 'Trail',\r\n                            other: { columns, rows }\r\n                        }\r\n                    ]\r\n                },\r\n                config: {\r\n                    toolbarInfo: [\r\n                        {\r\n                            label: 'Current filing #',\r\n                            value: this.toFID(this.patient.filingID)\r\n                        },\r\n                        {\r\n                            label: 'Status',\r\n                            value: this.service.isActiveFilingNum(\r\n                                this.patient.filingID\r\n                            )\r\n                            ?\r\n                            'Active'\r\n                            : this.service.isDormantFilingNum(\r\n                                this.patient.filingID\r\n                            )\r\n                            ?\r\n                            'Dormant'\r\n                            :\r\n                            'N/A'\r\n                        }\r\n                    ],\r\n                    hiddenFooterBtns: [\r\n                        'Clear',\r\n                        'Next',\r\n                        'Back',\r\n                        'Finish'\r\n                    ],\r\n                    footerBtns: [\r\n                        /**\r\n                         * Navigate to get new filing number if they have dormant one.\r\n                         */\r\n                        {\r\n                            name: 'Get filing #',\r\n                            slot: 'end',\r\n                            state: {\r\n                                visible: {\r\n                                    default: () => this.service.isDormantFilingNum(\r\n                                        this.patient.filingID\r\n                                    )\r\n                                }\r\n                            },\r\n                            onClick: async () => await this.onAssignFilingNumber()\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A form field that displays a list of patients with filing numbers\r\n         * to swap with\r\n         */\r\n        getCandidateSelectionField(): Field {\r\n            // Keeps track of the component object that's presented on the screen\r\n            let selectorInstance: any = {}\r\n            // Candidate list is paginated, tracking page here\r\n            let pageNumber = 0\r\n            let filingNumbeSearchTerm = ''\r\n            // Restore point for archived candidates\r\n            let filingOptionsBackup: Option[] = []\r\n\r\n            return {\r\n                id: 'select_candidate_to_swap',\r\n                type: FieldType.TT_CARD_SELECTOR,\r\n                helpText: 'Filing Number (Archive)',\r\n                condition: () => false,\r\n                validation: (val: Option) => Validation.required(val),\r\n                onload: (instance: any) => selectorInstance = instance,\r\n                onValue: async (val: Option) => {\r\n                    if(val) {\r\n                        const ok = await alertConfirmation(`Do you want to archive ${val.value}`)\r\n                        if (ok) {\r\n                            const swapped = await this.swapExistingFilingNumbers(\r\n                                val.other.data\r\n                            )\r\n                            if (swapped) {\r\n                                this.filingNumberAssignment = swapped\r\n                                this.fieldComponent = 'filing_number_management'\r\n                                return true\r\n                            }                     \r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                options: () => this.getArchivingCandidates(),\r\n                config: {\r\n                    hiddenFooterBtns: [\r\n                        'Clear',\r\n                        'Back',\r\n                        'Finish',\r\n                        'Next'\r\n                    ],\r\n                    footerBtns: [\r\n                        /**\r\n                         * Resets listData to previous state after a search term was triggerred.\r\n                         * Note: Only visible when users searches filing numbers\r\n                         */\r\n                        {\r\n                            name: 'Reset',\r\n                            slot: 'end',\r\n                            color: 'warning',\r\n                            state: {\r\n                                visible: {\r\n                                    default: () => filingNumbeSearchTerm ? true : false \r\n                                }\r\n                            },\r\n                            onClick: () => {\r\n                                // Clear values and restore previous listData prior to search \r\n                                // results\r\n                                filingNumbeSearchTerm = ''\r\n                                selectorInstance.listData = filingOptionsBackup\r\n                                filingOptionsBackup = []\r\n                            }\r\n                        },\r\n                        /**\r\n                         * Loads a key pad for searching for a filing candidate\r\n                         */\r\n                        {\r\n                            name: 'Specify',\r\n                            slot: 'end',\r\n                            color: 'success',\r\n                            onClick: async () => {\r\n                                filingNumbeSearchTerm = await this.filingNumberSearchKeypad()\r\n                                if (filingNumbeSearchTerm) {\r\n                                    const filingNumbers = await this.service.getFilingNumber(\r\n                                        filingNumbeSearchTerm\r\n                                    )\r\n                                    // Create a restore point for archived candidates\r\n                                    filingOptionsBackup = [...selectorInstance.listData]\r\n                                    selectorInstance.listData = this.formatCandidateOptions(filingNumbers)\r\n                                }\r\n                            }\r\n                        },\r\n                        /**\r\n                         * List pagination button that decrements the page number.\r\n                         * Note: this button will only appear when no filing number were manually searched.\r\n                         * It will also appear when pageNumber is greater than 1\r\n                         */\r\n                        {\r\n                            name: 'Previous batch',\r\n                            slot: 'end',\r\n                            state: {\r\n                                visible: {\r\n                                    default: () => !filingNumbeSearchTerm\r\n                                },\r\n                                disabled: {\r\n                                    default: () => pageNumber <= 0 \r\n                                }\r\n                            },\r\n                            onClick: async () => {\r\n                                pageNumber -= 1\r\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\r\n                            }\r\n                        },\r\n                        /**\r\n                         * List pagination button that increments the page number.\r\n                         * Note: this button will only appear when no filing number were manually searched\r\n                         * and if the list has 10 or more items\r\n                         */\r\n                        {\r\n                            name: 'Next batch',\r\n                            slot: 'end',\r\n                            state: {\r\n                                visible: {\r\n                                    default: () => !filingNumbeSearchTerm\r\n                                },\r\n                                disabled: {\r\n                                    default: () => (\r\n                                        selectorInstance.listData \r\n                                        && selectorInstance.listData.length <= 1\r\n                                    ) \r\n                                }\r\n                            },\r\n                            onClick: async () => {\r\n                                pageNumber += 1\r\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * Form field that displays new filing number assigned to a\r\n         * Patient\r\n         */\r\n        getFilingNumberField(): Field {\r\n            return {\r\n                id: \"filing_number_management\",\r\n                type: FieldType.TT_FILING_NUMBER_VIEW,\r\n                helpText: \"Filing Number Management\",\r\n                onload: async () => await this.service.printFilingNumber(),\r\n                condition: () => false,\r\n                options: () => [ \r\n                    this.filingNumberAssignment.primary, \r\n                    this.filingNumberAssignment.archived \r\n                ],\r\n                config: {\r\n                    hiddenFooterBtns: [\r\n                        'Cancel',\r\n                        'Clear',\r\n                        'Next'\r\n                    ],\r\n                    footerBtns: [\r\n                        {\r\n                            name: 'Print #',\r\n                            slot: 'start',\r\n                            onClick: async () => this.service.printFilingNumber()\r\n                        },\r\n                        {\r\n                            name: 'Print Dormant#',\r\n                            slot: 'start',\r\n                            state: {\r\n                                visible: {\r\n                                    default: () => this.filingNumberAssignment\r\n                                        ?.archived\r\n                                        ?.other\r\n                                        ?.patientID ? true : false\r\n                                }\r\n                            },\r\n                            onClick: async () => {\r\n                                const dormantPatient = new FilingNumberService()\r\n                                dormantPatient.setPatientID(\r\n                                    this.filingNumberAssignment\r\n                                    .archived\r\n                                    .other\r\n                                    .patientID\r\n                                )\r\n                                await dormantPatient.printFilingNumber()\r\n                            }\r\n                        },\r\n                        {\r\n                            name: 'Continue',\r\n                            color: 'success',\r\n                            slot: 'end',\r\n                            onClick: async () => {\r\n                                // Go to a specic route\r\n                                if (this.nextWorkflowRouteName) {\r\n                                    /**\r\n                                     * By default, we append patient_id to nextWorkflowRouteName.\r\n                                     */\r\n                                    return this.$router.push({\r\n                                        name: this.nextWorkflowRouteName,\r\n                                        params: {\r\n                                            'patient_id': this.service.getPatientID()\r\n                                        }\r\n                                    })\r\n                                }\r\n                                const nextTask: any = await WorkflowService.getNextTaskParams(\r\n                                    this.service.getPatientID()\r\n                                )\r\n                                if (!nextTask.name) {\r\n                                    nextTask.name = 'Patient Dashboard'\r\n                                    nextTask.params = {\r\n                                        'id': this.service.getPatientID()\r\n                                    }\r\n                                }\r\n                                this.$router.push(nextTask)\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { render } from \"./FilingNumberManagement.vue?vue&type=template&id=3ba9c793&ts=true\"\nimport script from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}