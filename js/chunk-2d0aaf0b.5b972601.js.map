{"version":3,"sources":["webpack:///./src/apps/ART/views/FilingNumberManagement.vue?86ad","webpack:///./src/apps/ART/services/filing_number_service.ts","webpack:///./src/apps/ART/views/FilingNumberManagement.vue","webpack:///./src/apps/ART/views/FilingNumberManagement.vue?6675"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","skipSummary","activeField","fieldComponent","onOnIndex","$event","fields","patientID","activePrefix","dormantPrefix","getActivePrx","this","getDormantPrx","getPatientID","setPatientID","formatNumber","num","prefix","search","substring","length","loadFilingPrefix","filingNumberPrefix","prx","split","isActiveFilingNum","filingNumber","match","RegExp","isDormantFilingNum","assignFilingNumber","postJson","getFilingNumber","identifier","getJson","res","map","person","patient","getID","getGivenName","getFamilyName","archiveFilingNumber","archivePatient","secondaryPatient","getArchivingCandidates","page","pageSize","getPastFilingNumbers","printFilingNumber","printer","printLbl","components","HisStandardForm","data","service","nextWorkflowRouteName","filingNumberAssignment","watch","handler","query","params","patient_id","getPatient","getFilingNumberField","getCandidateSelectionField","getFilingNumberHistoryField","archive","assign","onAssignFilingNumber","trail","next_workflow_task","immediate","deep","methods","toFID","filingID","newFilingNumber","assigned","Promise","assignment","primary","label","value","name","other","activeNumber","dormantNumber","archived","presentLoading","dismiss","new_identifier","archived_identifier","swapExistingFilingNumbers","candidate","swapped","active_number","given_name","family_name","dormant_number","message","create","backdropDismiss","loading","present","findByID","_patient","id","$router","back","filingNumberSearchKeypad","component","cssClass","componentProps","title","strictNumbers","onKeyPress","modal","onDidDismiss","pageNumber","candidates","formatCandidateOptions","state","list","style","color","fontWeight","toStandardHisDisplayFormat","appointment_date","type","TT_TABLE_VIEWER","helpText","condition","options","columns","rows","d","isActive","voided","date_created","date_voided","config","toolbarInfo","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","selectorInstance","filingNumbeSearchTerm","filingOptionsBackup","TT_CARD_SELECTOR","validation","val","required","onload","instance","onValue","ok","listData","filingNumbers","disabled","TT_FILING_NUMBER_VIEW","dormantPatient","__exports__"],"mappings":"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","file":"js/chunk-2d0aaf0b.5b972601.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.fieldComponent='')),\n    fields: _ctx.fields\n  }, null, 8, [\"activeField\", \"fields\"]))\n}","import { Service } from \"@/services/service\";\nimport { PrintoutService } from \"@/services/printout_service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport ART_PROP from \"../art_global_props\";\n\nexport class FilingNumberService extends Service {\n    patientID: number;\n    activePrefix: string;\n    dormantPrefix: string;\n\n    constructor() {\n        super()\n        this.patientID = 0\n        this.activePrefix = ''\n        this.dormantPrefix = ''\n    }\n\n    getActivePrx() {\n        return this.activePrefix\n    }\n\n    getDormantPrx() {\n        return this.dormantPrefix\n    }\n\n    getPatientID() {\n        return this.patientID\n    }\n\n    setPatientID(patientID: number) {\n        this.patientID = patientID\n    }\n\n    formatNumber(num: string) {\n        const prefix = num.search(this.activePrefix) >= 0 \n            ? this.activePrefix\n            : num.search(this.dormantPrefix) >= 0 \n            ? this.dormantPrefix\n            : ''\n        return prefix ? num.substring(prefix.length, num.length) : num\n    }\n\n    async loadFilingPrefix() {\n        const prx = await ART_PROP.filingNumberPrefix()\n        if (prx) {\n            const [activePrefix, dormantPrefix] = prx.split(',')\n            this.activePrefix = activePrefix\n            this.dormantPrefix = dormantPrefix\n        }\n    }\n\n    isActiveFilingNum(filingNumber: string) {\n        return filingNumber.match(new RegExp(this.activePrefix, 'i'))\n            ? true\n            : false\n    }\n\n    isDormantFilingNum(filingNumber: string) {\n        return filingNumber.match(new RegExp(this.dormantPrefix, 'i'))\n            ? true\n            : false\n    }\n\n    async assignFilingNumber() {\n        return Service.postJson(`patients/${this.patientID}/filing_number`, {})\n    }\n\n    async getFilingNumber(filingNumber: string) {\n        const identifier = `${this.activePrefix}${filingNumber}`\n        const res = await Service.getJson(`search/patients/by_identifier`, {\n            'type_id': 17, \n            'identifier': identifier\n        })\n        if (res) {\n            return res.map((person: any) => {\n                const patient = new Patientservice(person)\n                return {\n                    identifier,\n                    'patient_id': patient.getID(),\n                    'given_name': patient.getGivenName(),\n                    'family_name': patient.getFamilyName(),\n                    'state': 'N/A',\n                    'appointment_date': ''\n                }\n            })\n        }\n        return []\n    }\n\n    archiveFilingNumber() {\n        return Service.getJson(`archive_active_filing_number`, {\n            'patient_id': this.patientID\n        })\n    }\n\n    archivePatient(secondaryPatient: number, identifier: string | number) {\n        return Service.postJson('swap_active_number', {\n            'primary_patient_id': this.patientID,\n            'secondary_patient_id': secondaryPatient,\n            identifier\n        })\n    }\n\n    getArchivingCandidates(page=0, pageSize=10) {\n        return Service.getJson(`archiving_candidates`, {\n            page,'page_size': pageSize\n        })\n    }\n\n    getPastFilingNumbers() {\n        return Service.getJson(`patients/${this.patientID}/past_filing_numbers`)\n    }\n\n    printFilingNumber() {\n        const printer = new PrintoutService()\n        return printer.printLbl(`patients/${this.patientID}/labels/filing_number`) \n    }\n}","\nimport { defineComponent } from 'vue'\nimport { isEmpty } from 'lodash';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { loadingController, modalController } from \"@ionic/vue\"\nimport { Patientservice } from '@/services/patient_service';\nimport { FilingNumberService } from '@/apps/ART/services/filing_number_service'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { alertConfirmation, toastDanger, toastWarning  } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport Keypad from \"@/components/Keyboard/HisKeypad.vue\"\nimport { nextTask } from '@/utils/WorkflowTaskHelper';\n\n/**\n * Manages filing number assignment\n * Can view filing number trail\n * Can swap filing numbers between candidates\n */\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        service: {} as any,\n        patient: {} as any,\n        fieldComponent: '' as string,\n        fields: [] as Array<Field>,\n        nextWorkflowRouteName: '' as string,\n        filingNumberAssignment: {} as Record<string, Option>,\n    }),\n    watch: {\n        /**\n         * Initiates service and Detects parameters \n         * in the url and switch to appropriate actions\n         */\n        '$route': {\n            async handler({query, params}: any) {\n                if (params && params.patient_id) {\n                    this.service = new FilingNumberService()\n                    this.service.setPatientID(params.patient_id)\n                    this.patient = await this.getPatient(params.patient_id)\n                    await this.service.loadFilingPrefix()\n                }\n                if (query) {\n                    this.fields = [\n                        this.getFilingNumberField(),\n                        this.getCandidateSelectionField(),\n                        this.getFilingNumberHistoryField()\n                    ]\n                    if (query.archive === \"true\") {\n                        await this.archiveFilingNumber()\n                        return \n                    }\n                    if (query.assign === \"true\") {\n                        await this.onAssignFilingNumber()\n                    }\n                    if (query.trail === \"true\") {\n                       this.fieldComponent = 'view_filing_history'\n                    }\n                    if (query.next_workflow_task) {\n                        this.nextWorkflowRouteName = query.next_workflow_task\n                    }\n                }             \n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        /**\n         * Helper method for formatting filing numbers \n         * for display purposes only!\n         */\n        toFID(filingID: string) {\n            return this.service.formatNumber(filingID)\n        },\n        async onAssignFilingNumber() {\n            const assigned = await this.newFilingNumber()\n            if (assigned) {\n                this.filingNumberAssignment = assigned\n                this.fieldComponent = 'filing_number_management'\n            } else {\n                this.fieldComponent = 'select_candidate_to_swap'\n                toastWarning('Out of filing numbers, Please select eligible candidate')\n            }\n        },\n        /**\n         * Assigns and creates filing number assignment object\n         */\n        async newFilingNumber(): Promise<Record<string, Option> | undefined> {\n            const assignment: Record<string, Option> = {\n                primary: {\n                    label: 'Dormant → Active',\n                    value: this.patient.name,\n                    other: {\n                        activeNumber: this.patient.filingID \n                            ? this.toFID(this.patient.filingID)\n                            : 'N/A', \n                        dormantNumber: 'N/A'\n                    }\n                },\n                archived:  {\n                    label: 'Active → Dormant',\n                    value: 'N/A',\n                    other: {\n                        activeNumber: 'N/A', \n                        dormantNumber: 'N/A'\n                    }\n                }\n            }\n            /**\n             * Do assign a new filing number if the patient already\n             * has one\n             */\n            if (this.service.isActiveFilingNum(this.patient.filingID)) {\n                return assignment\n            }\n\n            await this.presentLoading()\n\n            const assigned = await this.service.assignFilingNumber()\n\n            loadingController.dismiss()\n\n            if (isEmpty(assigned)) return\n\n            assignment.primary.other = {\n                activeNumber: this.toFID(\n                    assigned.new_identifier.identifier\n                ),\n                dormantNumber: this.service\n                    .isDormantFilingNum(this.patient.filingID) \n                    ? this.toFID(this.patient.filingID)\n                    : 'N/A'\n            }\n\n            if (!isEmpty(assigned.archived_identifier)) {\n                const patient = await this.getPatient(\n                    assigned.archived_identifier.patient_id\n                )\n                assignment.archived = {\n                    label: 'Active → Dormant',\n                    value: patient.name,\n                    other: {\n                        activeNumber: this.toFID(\n                            assigned.archived_identifier.identifier\n                        ), \n                        dormantNumber: this.toFID(\n                            assigned.new_identifier.identifier\n                        )\n                    }\n                }\n            }\n            return assignment\n        },\n        /**\n         * Swap filing numbers between an active candidate with a dormant candidate\n        */\n        async swapExistingFilingNumbers(candidate: any) {\n            const swapped = await this.service.archivePatient(\n               candidate.patient_id, candidate.identifier\n            )\n            if (swapped) {\n                return {\n                    primary: {\n                        label: 'Dormant → Active',\n                        value: this.patient.name,\n                        other: {\n                            activeNumber: this.toFID(swapped.active_number), \n                            dormantNumber: this.toFID(this.patient.filingID) || 'N/A'\n                        }\n                    },\n                    archived:  {\n                        label: 'Active → Dormant',\n                        value: `${candidate.given_name} ${candidate.family_name}`,\n                        other: {\n                            patientID: candidate.patient_id,\n                            activeNumber: this.toFID(swapped.dormant_number), \n                            dormantNumber:this.toFID(swapped.active_number)\n                        }\n                    }\n                }\n            }\n        },\n        async presentLoading(message=\"Please wait...\") {\n            const loading = await loadingController.create({\n                message, backdropDismiss: false\n            })\n            await loading.present()\n        },\n        async getPatient(patientID: number): Promise<Record<string, number | string>> {\n            const patient = await Patientservice.findByID(patientID)\n            if (patient) {\n                const _patient = new Patientservice(patient)\n                return {\n                    id: _patient.getID(),\n                    filingID: _patient.getFilingNumber(),\n                    name: `${_patient.getGivenName()} ${_patient.getFamilyName()}`\n                }\n            }\n            return {}\n        },\n        /**\n         * Archives currrent patient and routes to the previous page view\n         */\n        async archiveFilingNumber() {\n            await this.presentLoading('Archiving filing number')\n            try {\n                await this.service.archiveFilingNumber()\n                await this.service.printFilingNumber()\n            }catch(e) {\n                toastDanger(e)\n            }\n            await loadingController.dismiss()\n            this.$router.back()\n        },\n        async filingNumberSearchKeypad() {\n            const modal = await modalController.create({\n                component: Keypad,\n                backdropDismiss: false,\n                cssClass: 'keypad-modal',\n                componentProps: {\n                    title: 'Find Active number',\n                    strictNumbers: false,\n                    onKeyPress: () => {\n                        //TODO: do nothing!\n                    }\n                }\n            })\n            await modal.present()\n            const { data } = await modal.onDidDismiss()\n            return data\n        },\n        async getArchivingCandidates(pageNumber=0): Promise<Option[]> {\n            const candidates = await this.service.getArchivingCandidates(pageNumber)\n            return this.formatCandidateOptions(candidates)\n        },\n        /**\n         * Converts array of objects with candidates to a list options array\n         */\n        formatCandidateOptions(candidates: Array<any>): Option[] {\n            return candidates.map((candidate: any) => ({\n                label: `${candidate.given_name} ${candidate.family_name} (${candidate.state})`,\n                value: candidate.identifier,\n                other: {\n                    data: candidate,\n                    list: [\n                        {\n                            label: 'Filing #',\n                            value: this.toFID(candidate.identifier),\n                            style: {\n                                color: 'green', \n                                fontWeight: 'bold'\n                            }\n                        },\n                        {\n                            label: 'Given name',\n                            value: candidate.given_name\n                        },\n                        {\n                            label: 'Family name',\n                            value: candidate.family_name\n                        },\n                        {\n                            label: 'Outcome',\n                            value: candidate.state.match(/trans/i)\n                                ? 'TO'\n                                : candidate.state.match(/stop/i) \n                                ? 'Tx stopped'\n                                : candidate.state\n                        },\n                        {\n                            label: 'LAD',\n                            value: HisDate.toStandardHisDisplayFormat(\n                                candidate.appointment_date\n                            )\n                        }\n                    ]   \n                }\n            }))\n        },\n        /*\n        * Form field that a table of all filing numbers assigned to a patient\n         */\n        getFilingNumberHistoryField(): Field {\n            return {\n                id: 'view_filing_history',\n                type: FieldType.TT_TABLE_VIEWER,\n                helpText: 'Filing Number Trail',\n                condition: () => false,\n                options: async () => {\n                    const columns = ['Status', 'Filing #', 'Date Created', 'Date voided']\n                    const data = await this.service.getPastFilingNumbers()\n                    const rows = data.map((d: any) => {\n                        const isActive = d.voided === 0\n                        return [\n                            isActive ? 'Active' : 'Voided',\n                            this.toFID(d.identifier),\n                            HisDate.toStandardHisDisplayFormat(d.date_created),\n                            !isActive ? HisDate.toStandardHisDisplayFormat(d.date_voided): 'N/A'\n                        ]\n                    })\n                    return [\n                        {\n                            label: 'Filing Number Trail',\n                            value: 'Trail',\n                            other: { columns, rows }\n                        }\n                    ]\n                },\n                config: {\n                    toolbarInfo: [\n                        {\n                            label: 'Current filing #',\n                            value: this.toFID(this.patient.filingID)\n                        },\n                        {\n                            label: 'Status',\n                            value: this.service.isActiveFilingNum(\n                                this.patient.filingID\n                            )\n                            ?\n                            'Active'\n                            : this.service.isDormantFilingNum(\n                                this.patient.filingID\n                            )\n                            ?\n                            'Dormant'\n                            :\n                            'N/A'\n                        }\n                    ],\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Next',\n                        'Back',\n                        'Finish'\n                    ],\n                    footerBtns: [\n                        /**\n                         * Navigate to get new filing number if they have dormant one.\n                         */\n                        {\n                            name: 'Get filing #',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => this.service.isDormantFilingNum(\n                                        this.patient.filingID\n                                    )\n                                }\n                            },\n                            onClick: async () => await this.onAssignFilingNumber()\n                        }\n                    ]\n                }\n            }\n        },\n        /**\n         * A form field that displays a list of patients with filing numbers\n         * to swap with\n         */\n        getCandidateSelectionField(): Field {\n            // Keeps track of the component object that's presented on the screen\n            let selectorInstance: any = {}\n            // Candidate list is paginated, tracking page here\n            let pageNumber = 0\n            let filingNumbeSearchTerm = ''\n            // Restore point for archived candidates\n            let filingOptionsBackup: Option[] = []\n\n            return {\n                id: 'select_candidate_to_swap',\n                type: FieldType.TT_CARD_SELECTOR,\n                helpText: 'Filing Number (Archive)',\n                condition: () => false,\n                validation: (val: Option) => Validation.required(val),\n                onload: (instance: any) => selectorInstance = instance,\n                onValue: async (val: Option) => {\n                    if(val) {\n                        const ok = await alertConfirmation(`Do you want to archive ${val.value}`)\n                        if (ok) {\n                            const swapped = await this.swapExistingFilingNumbers(\n                                val.other.data\n                            )\n                            if (swapped) {\n                                this.filingNumberAssignment = swapped\n                                this.fieldComponent = 'filing_number_management'\n                                return true\n                            }                     \n                        }\n                    }\n                    return false\n                },\n                options: () => this.getArchivingCandidates(),\n                config: {\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Back',\n                        'Finish',\n                        'Next'\n                    ],\n                    footerBtns: [\n                        /**\n                         * Resets listData to previous state after a search term was triggerred.\n                         * Note: Only visible when users searches filing numbers\n                         */\n                        {\n                            name: 'Reset',\n                            slot: 'end',\n                            color: 'warning',\n                            state: {\n                                visible: {\n                                    default: () => filingNumbeSearchTerm ? true : false \n                                }\n                            },\n                            onClick: () => {\n                                // Clear values and restore previous listData prior to search \n                                // results\n                                filingNumbeSearchTerm = ''\n                                selectorInstance.listData = filingOptionsBackup\n                                filingOptionsBackup = []\n                            }\n                        },\n                        /**\n                         * Loads a key pad for searching for a filing candidate\n                         */\n                        {\n                            name: 'Specify',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async () => {\n                                filingNumbeSearchTerm = await this.filingNumberSearchKeypad()\n                                if (filingNumbeSearchTerm) {\n                                    const filingNumbers = await this.service.getFilingNumber(\n                                        filingNumbeSearchTerm\n                                    )\n                                    // Create a restore point for archived candidates\n                                    filingOptionsBackup = [...selectorInstance.listData]\n                                    selectorInstance.listData = this.formatCandidateOptions(filingNumbers)\n                                }\n                            }\n                        },\n                        /**\n                         * List pagination button that decrements the page number.\n                         * Note: this button will only appear when no filing number were manually searched.\n                         * It will also appear when pageNumber is greater than 1\n                         */\n                        {\n                            name: 'Previous batch',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => !filingNumbeSearchTerm\n                                },\n                                disabled: {\n                                    default: () => pageNumber <= 0 \n                                }\n                            },\n                            onClick: async () => {\n                                pageNumber -= 1\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\n                            }\n                        },\n                        /**\n                         * List pagination button that increments the page number.\n                         * Note: this button will only appear when no filing number were manually searched\n                         * and if the list has 10 or more items\n                         */\n                        {\n                            name: 'Next batch',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: () => !filingNumbeSearchTerm\n                                },\n                                disabled: {\n                                    default: () => (\n                                        selectorInstance.listData \n                                        && selectorInstance.listData.length <= 1\n                                    ) \n                                }\n                            },\n                            onClick: async () => {\n                                pageNumber += 1\n                                selectorInstance.listData = await this.getArchivingCandidates(pageNumber)\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        /**\n         * Form field that displays new filing number assigned to a\n         * Patient\n         */\n        getFilingNumberField(): Field {\n            return {\n                id: \"filing_number_management\",\n                type: FieldType.TT_FILING_NUMBER_VIEW,\n                helpText: \"Filing Number Management\",\n                onload: async () => await this.service.printFilingNumber(),\n                condition: () => false,\n                options: () => [ \n                    this.filingNumberAssignment.primary, \n                    this.filingNumberAssignment.archived \n                ],\n                config: {\n                    hiddenFooterBtns: [\n                        'Cancel',\n                        'Clear',\n                        'Next'\n                    ],\n                    footerBtns: [\n                        {\n                            name: 'Print #',\n                            slot: 'start',\n                            onClick: async () => this.service.printFilingNumber()\n                        },\n                        {\n                            name: 'Print Dormant#',\n                            slot: 'start',\n                            state: {\n                                visible: {\n                                    default: () => this.filingNumberAssignment\n                                        ?.archived\n                                        ?.other\n                                        ?.patientID ? true : false\n                                }\n                            },\n                            onClick: async () => {\n                                const dormantPatient = new FilingNumberService()\n                                dormantPatient.setPatientID(\n                                    this.filingNumberAssignment\n                                    .archived\n                                    .other\n                                    .patientID\n                                )\n                                await dormantPatient.printFilingNumber()\n                            }\n                        },\n                        {\n                            name: 'Continue',\n                            color: 'success',\n                            slot: 'end',\n                            onClick: () => nextTask(this.patient.id, this.$router, this.$route)\n                        }\n                    ]\n                }\n            }\n        }\n    }\n})\n","import { render } from \"./FilingNumberManagement.vue?vue&type=template&id=bec642ba&ts=true\"\nimport script from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./FilingNumberManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}