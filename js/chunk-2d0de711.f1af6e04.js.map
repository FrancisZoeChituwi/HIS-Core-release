{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?8e8d","webpack:///./src/apps/OPD/services/hiv_status_service.ts","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?1881"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","patientID","providerID","components","HisStandardForm","mixins","EncounterMixin","data","hivService","watch","ready","handler","isReady","patient","getID","getFields","immediate","deep","methods","formData","computedData","createEncounter","encounter","resolveObs","saveObservationList","obs","nextTask","buildDateObs","conceptName","date","isEstimate","match","this","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","TT_SELECT","validation","value","required","computedValue","options","label","minDate","getBirthdate","condition","hiv_status","summaryLabel","estimation","allowUnknown","computeValue","getDate","_","filter","config","showKeyboard","__exports__"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+B,8BAAkB,qBAEvD,OAAQ,yBAAc,yBAAaA,EAA8B,CAC/DC,sBAAuBP,EAAKQ,kBAC5BC,OAAQT,EAAKS,OACbC,eAAgBV,EAAKW,UACpB,KAAM,EAAG,CAAC,wBAAyB,SAAU,mB,sNCPrC,EAAb,wDACI,WAAYC,EAAmBC,GAAkB,0CACvCD,EAAW,GAAIC,GAF7B,UAAsC,QCUvB,+BAAgB,CAC3BC,WAAY,CAAEC,gBAAA,QACdC,OAAQ,CAACC,EAAA,MACTC,KAAM,iBAAO,CACTC,WAAY,KAEhBC,MAAO,CACHC,MAAO,CACGC,QADH,SACWC,GAAgB,wJACvBA,IACC,EAAKJ,WAAa,IAAI,EAAiB,EAAKK,QAAQC,QAAS,EAAKZ,YAClE,EAAKJ,OAAS,EAAKiB,aAHG,8CAM9BC,WAAW,EACXC,MAAM,IAGdC,QAAS,CACClB,SADD,SACUmB,EAAeC,GAAiB,kLACnB,EAAKZ,WAAWa,kBADG,UACrCC,EADqC,OAEtCA,EAFsC,yCAEpB,eAAa,+BAFO,uBAGxB,EAAKC,WAAL,kBAAoBH,IAHI,cAGrCb,EAHqC,iBAIzB,EAAKC,WAAWgB,oBAAoBjB,GAJX,WAIrCkB,EAJqC,OAKtCA,EALsC,0CAK1B,eAAa,gCALa,QAM3C,EAAKC,WANsC,+CAQ/CC,aATK,SASQC,EAAqBC,EAAcC,GAC5C,IAAIL,EAAM,GAQV,OANIA,EADAI,EAAKE,MAAM,YACLC,KAAKxB,WAAWyB,eAAeL,EAAa,WAC3CE,EACDE,KAAKxB,WAAW0B,wBAAwBN,EAAaC,GAErDG,KAAKxB,WAAW2B,eAAeP,EAAaC,GAE/CJ,GAEXV,UApBK,WAoBI,WACL,OACI,CACIqB,GAAI,aACJC,SAAU,aACVC,KAAM,OAAUC,UAChBC,WAAY,SAACC,GAAD,OAAgB,OAAWC,SAASD,IAChDE,cAAe,gBAAGF,EAAH,EAAGA,MAAH,MAAwB,CACnChB,IAAK,EAAKjB,WAAWyB,eAAe,aAAcQ,KAEtDG,QAAS,iBAAO,CACZ,CAAEC,MAAO,mBAAoBJ,MAAO,oBACpC,CAAEI,MAAO,mBAAoBJ,MAAO,mBACpC,CAAEI,MAAO,oBAAqBJ,MAAO,qBACrC,CAAEI,MAAO,eAAgBJ,MAAO,gBAChC,CAAEI,MAAO,eAAgBJ,MAAO,gBAChC,CAAEI,MAAO,eAAgBJ,MAAO,oBAf5C,sBAkBO,eAAmB,CAClBL,GAAI,gBACJC,SAAU,WACVK,UAAU,EACVI,QAAS,kBAAM,EAAKjC,QAAQkC,gBAC5BC,UAAW,SAAClD,GAAD,MAA6C,iBAA5BA,EAAOmD,WAAWR,OAC9CS,aAAc,gBACdC,WAAY,CACRC,cAAc,GAElBC,aAAc,SAACxB,EAAcC,GAAf,OAAuC,EAAKH,aAAa,gBAAiBE,EAAMC,KAE/FE,KAAKxB,WAAW8C,YA9BvB,CA+BI,CACIlB,GAAI,gBACJC,SAAU,oBACVC,KAAM,OAAUC,UAChBC,WAAY,SAACC,GAAD,OAAgB,OAAWC,SAASD,IAChDE,cAAe,gBAAGE,EAAH,EAAGA,MAAH,MAAwB,CAACpB,IAAK,EAAKjB,WAAWyB,eAAe,oBAAqBY,KACjGG,UAAW,SAAClD,GAAD,MAA6C,iBAA5BA,EAAOmD,WAAWR,OAC9CG,QAAS,SAACW,GAAD,IAASC,EAAT,uDAAgB,GAAhB,OAAuB,eAAcA,IAC9CC,OAAQ,CACJC,cAAc,U,qBCtFtC,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASvE,KAErD","file":"js/chunk-2d0de711.f1af6e04.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\r\n\r\nexport class HIVStatusService extends AppEncounterService {\r\n    constructor(patientID: number, providerID: number) {\r\n        super(patientID, 39, providerID) \r\n    }\r\n}\r\n","\r\nimport { defineComponent} from 'vue'\r\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\r\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\r\nimport Validation from '@/components/Forms/validations/StandardValidations';\r\nimport { Field, Option } from '@/components/Forms/FieldInterface';\r\nimport { FieldType } from '@/components/Forms/BaseFormElements';\r\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\r\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper';\r\nimport { toastWarning } from '@/utils/Alerts';\r\nimport { HIVStatusService } from '../../services/hiv_status_service';\r\n\r\nexport default defineComponent({\r\n    components: { HisStandardForm },\r\n    mixins: [EncounterMixinVue],\r\n    data: () => ({\r\n        hivService: {} as any\r\n    }),\r\n    watch: {\r\n        ready: {\r\n            async handler(isReady: boolean) {\r\n                if(isReady){\r\n                    this.hivService = new HIVStatusService(this.patient.getID(), this.providerID)\r\n                    this.fields = this.getFields()\r\n                }\r\n            },\r\n            immediate: true,\r\n            deep: true\r\n        }\r\n    },\r\n    methods: {\r\n        async onSubmit(formData: any, computedData: any){\r\n            const encounter = await this.hivService.createEncounter()\r\n            if (!encounter) return toastWarning('Unable to create encounter') \r\n            const data = await this.resolveObs({...computedData})\r\n            const obs = await this.hivService.saveObservationList(data)\r\n            if (!obs) return toastWarning('Unable to save observations')\r\n            this.nextTask()        \r\n        },\r\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\r\n            let obs = {}\r\n            if (date.match(/unknown/i)) {\r\n                obs = this.hivService.buildValueText(conceptName, 'Unknown')\r\n            } else if (isEstimate) {\r\n                obs = this.hivService.buildValueDateEstimated(conceptName, date)\r\n            } else {\r\n                obs = this.hivService.buildValueDate(conceptName, date)\r\n            }\r\n            return obs\r\n        },\r\n        getFields(): Array<Field>{\r\n            return [\r\n                {\r\n                    id: 'hiv_status',\r\n                    helpText: 'HIV status',\r\n                    type: FieldType.TT_SELECT,\r\n                    validation: (value: any) => Validation.required(value),\r\n                    computedValue: ({ value }: Option) => ({\r\n                        obs: this.hivService.buildValueText('HIV status', value)\r\n                    }),\r\n                    options: () => ([\r\n                        { label: 'Positive not ART', value: 'Positive not ART' },\r\n                        { label: 'Posititve on ART', value: 'Positive on ART' },\r\n                        { label: 'Previous negative', value: 'Previous negative' },\r\n                        { label: 'New positive', value: 'New positive' },\r\n                        { label: 'New negative', value: 'New negative' },\r\n                        { label: 'Never tested', value: 'Never tested' },\r\n                    ])\r\n                },\r\n                ...generateDateFields({\r\n                    id: 'hiv_test_date',\r\n                    helpText: 'HIV Test',\r\n                    required: true,\r\n                    minDate: () => this.patient.getBirthdate(),\r\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\r\n                    summaryLabel: 'HIV test date',\r\n                    estimation: {\r\n                        allowUnknown: true\r\n                    },\r\n                    computeValue: (date: string, isEstimate: boolean) => this.buildDateObs('HIV test date', date, isEstimate)\r\n                    \r\n                }, this.hivService.getDate()),\r\n                {\r\n                    id: 'test_location',\r\n                    helpText: 'HIV test location',\r\n                    type: FieldType.TT_SELECT,\r\n                    validation: (value: any) => Validation.required(value),\r\n                    computedValue: ({ label }: Option) => ({obs: this.hivService.buildValueText('HIV test location', label)}),\r\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\r\n                    options: (_: any, filter='') => getFacilities(filter),\r\n                    config: {\r\n                        showKeyboard: true\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n})\r\n","import { render } from \"./HIVStatus.vue?vue&type=template&id=7a863b66&ts=true\"\nimport script from \"./HIVStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./HIVStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}