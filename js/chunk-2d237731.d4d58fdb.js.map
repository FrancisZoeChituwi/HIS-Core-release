{"version":3,"sources":["webpack:///./src/apps/LOS/views/OrderTests.vue?7233","webpack:///./src/apps/LOS/views/OrderTests.vue","webpack:///./src/apps/LOS/views/OrderTests.vue?93f0"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","onFinishAction","onSubmit","mixins","EncounterMixin","data","patientID","service","activityType","watch","handler","query","params","this","patient_id","type","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getTestCombinationField","immediate","deep","methods","_","computed","placeOrder","req","printSpecimenLabel","order_id","$router","push","id","helpText","TT_SELECT","defaultValue","validation","val","required","options","filter","computedValue","config","showKeyboard","isFilterDataViaApi","field","getGivenNameField","proxyID","condition","appearInSummary","getFamilyNameField","summaryMapValue","v","f","label","value","given_name","getCachedConceptID","getSpecimens","map","d","name","concept_id","fieldContext","TT_MULTIPLE_SELECT","onload","context","specimen","getTestTypesBySpecimen","listData","getTestTypes","t","other","tests","length","__exports__"],"mappings":"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","file":"js/chunk-2d237731.d4d58fdb.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\nimport { OrderService } from \"@/services/order_service\"\nimport { ConceptService } from '@/services/concept_service'\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientID: -1,\n        service: {} as any,\n        fields: [] as Field[],\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\n    }),\n    watch: {\n        '$route': {\n            handler({query, params}: any) {\n                if (query && params) {\n                    this.patientID = params.patient_id\n                    this.activityType = query.type\n                    this.service = new PatientLabService(this.patientID)\n                    this.fields = [\n                        this.getClinianGivenNameField(),\n                        this.getClinianFamilyNameField(),\n                        this.getFacililityLocationField(),\n                        this.getReasonForTestField(),\n                        this.getTestSpecimensField(),\n                        this.getTestSelectionField(),\n                        this.getTestCombinationField()\n                    ]\n                }\n            },\n            immediate: true,\n            deep: true\n        },\n    },\n    methods: {\n        async onSubmit(_: any, computed: any) {\n            const req = await this.service.placeOrder(computed)\n            if (req) {\n                await this.service.printSpecimenLabel(req[0].order_id)\n                this.$router.push(`/patient/dashboard/${this.patientID}`)\n            } \n        },\n        getFacililityLocationField(): Field {\n            return {\n                id: 'target_lab',\n                helpText: 'Requesting location',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => PatientLabService.getLocationName(),\n                validation: (val: Option) => Validation.required(val),\n                options: (_: any, filter='') => getFacilities(filter),\n                computedValue: (val: Option) => val.label,\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getClinianGivenNameField(): Field {\n            const field = PersonField.getGivenNameField()\n            field.helpText = 'Requesting clinician - First name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.appearInSummary = () => false\n            return field\n        },\n        getClinianFamilyNameField(): Field {\n            const field = PersonField.getFamilyNameField()\n            field.helpText = 'Requesting clinician - Last name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.summaryMapValue = (v: any, f: any) => {\n                return {\n                    label: 'Clinician name', \n                    value: `${f.given_name.value} ${v.value}`\n                }\n            },\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\n            return field\n        },\n        getReasonForTestField(): Field {\n            return {\n                id: 'reason_for_test_id',\n                helpText: 'Reason for test',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\n                    val.value, true\n                ),\n                options: () => [\n                    {label: 'Routine', value: 'Routine'},\n                    {label: 'Targeted', value: 'Targeted'},\n                    {label: 'Confirmatory', value: 'Confirmatory'},\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\n                    {label: 'Stat', value: 'Stat'}\n                ]\n            }\n        },\n        getTestSpecimensField(): Field {\n            return { \n                id: 'specimen',\n                helpText: 'Select specimen',\n                type: FieldType.TT_SELECT,\n                condition: () => this.activityType === 'DRAW_SAMPLES',\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (v: Option) => ({'concept_id': v.value}),\n                options: async () => {\n                    const req = await OrderService.getSpecimens('')\n                    return req.map((d: any) => ({\n                        label: d.name, \n                        value: d.concept_id\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getTestSelectionField(): Field {\n            let fieldContext: any = {}\n            return {\n                id: 'tests',\n                helpText: 'Select tests',\n                type: FieldType.TT_MULTIPLE_SELECT,\n                onload: (context: any) => fieldContext = context,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: Array<Option>) => {\n                    return val.map(v => ({'concept_id': v.value}))\n                },\n                options: async (f: any) => {\n                    let req: any = {}\n \n                    if (f.specimen) {\n                        req = await OrderService.getTestTypesBySpecimen(\n                            f.specimen.label\n                        )\n                    } else {\n                        if (!isEmpty(fieldContext.listData)) {\n                            return fieldContext.listData\n                        } \n                        req = await OrderService.getTestTypes()\n                    }\n\n                    return req.map((t: any) => ({\n                        label: t.name,\n                        value: t.concept_id,\n                        other: t\n                    }))\n                }\n            }\n        },\n        getTestCombinationField(): Field {\n            return {\n                id: 'combine_tests',\n                helpText: 'Combine test(s) in one order',\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.value === 'Yes',\n                condition: (f: any) => f.tests.length > 1,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.yesNoOptions()\n            }\n        }\n    }\n})\n","import { render } from \"./OrderTests.vue?vue&type=template&id=6b154bf6&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}