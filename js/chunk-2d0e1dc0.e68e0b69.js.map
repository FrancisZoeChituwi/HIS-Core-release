{"version":3,"sources":["webpack:///./src/views/DuplicateIdentifiers.vue?9def","webpack:///./src/services/identifier_service.ts","webpack:///./src/views/DuplicateIdentifiers.vue","webpack:///./src/views/DuplicateIdentifiers.vue?1325"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","title","period","rows","fields","columns","canExportCsv","canExportPDf","onReportConfiguration","onPeriod","identifierType","this","type","getJson","identifier","components","ReportTemplate","data","service","dde","thTxt","created","getFormFields","loadDDEStatus","methods","idType","parseInt","value","toString","label","setIdentifierType","getRows","id","helpText","TT_SELECT","validation","val","required","options","getIdentifierTypes","map","i","name","patient_identifier_type_id","toDate","date","toStandardHisDisplayFormat","drillDuplicates","create","component","cssClass","componentProps","onRows","getPatientsByIdentifier","patients","p","patient","getGivenName","getFamilyName","getGender","getBirthdate","action","dismiss","then","$router","push","getID","modal","present","getDuplicateIndentifiers","td","count","tdBtn","event","disabled","isEnabled","getIdentifierType","__exports__"],"mappings":"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","file":"js/chunk-2d0e1dc0.e68e0b69.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: false,\n    canExportPDf: false,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"onReportConfiguration\"]))\n}","import { Service } from \"./service\";\n\nexport interface DuplicateIdentifiersInterface {\n    count: number;\n    identifier: string;\n}\n\nexport class IdentifierService extends Service {\n    identifierType: number\n    constructor() {\n        super()\n        this.identifierType = -1\n    }\n \n    static getIdentifierTypes() {\n        return super.getJson('types/patient_identifiers')\n    }\n\n    getIdentifierType() {\n        return this.identifierType\n    }\n\n    setIdentifierType(type: number) {\n        this.identifierType = type\n    }\n\n    getDuplicateIndentifiers(): Promise<DuplicateIdentifiersInterface[]> {\n        return Service.getJson(`search/identifiers/duplicates`, {\n            'type_id': this.identifierType\n        })\n    }\n\n    getPatientsByIdentifier(identifier: string) {\n        return Service.getJson(`search/patients/by_identifier`,{\n            'type_id': this.identifierType,\n            'identifier': identifier\n        })\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\nimport { FieldType } from '@/components/Forms/BaseFormElements'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { Option } from '@/components/Forms/FieldInterface'\nimport table, { RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\nimport { IdentifierService, DuplicateIdentifiersInterface } from \"@/services/identifier_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport DrillTable from \"@/components/DataViews/DrillTableModal.vue\"\nimport { modalController } from \"@ionic/vue\";\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport {PatientDemographicsExchangeService} from \"@/services/patient_demographics_exchange_service\"\n\nexport default defineComponent({\n    components: { ReportTemplate },\n    data: () => ({\n        service: {} as any,\n        dde: {} as any,\n        title: 'Duplicate Identifiers',\n        fields: [] as Field[],\n        rows: [] as Array<RowInterface[]>,\n        columns: [\n            [\n                table.thTxt('Identifier'), \n                table.thTxt('Count'), \n                table.thTxt('View'),\n                table.thTxt('Resolve')\n            ]\n        ]\n    }),\n    async created() {\n        this.fields = this.getFormFields()\n        this.dde = new PatientDemographicsExchangeService()\n        await this.dde.loadDDEStatus()\n    },\n    methods: {\n        async onPeriod({identifier}: any) {\n            const idType = parseInt(identifier.value.toString())\n            this.title = identifier.label + ' Duplicates'\n            this.service = new IdentifierService()\n            this.service.setIdentifierType(idType)\n            this.rows = await this.getRows()\n        },\n        getFormFields(): Array<Field> {\n            return [\n                {\n                    id: 'identifier',\n                    helpText: 'Select Identifier type',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => \n                        (await IdentifierService.getIdentifierTypes())\n                            .map((i: any) => ({\n                                label: i.name,\n                                value: i.patient_identifier_type_id\n                            }))\n                }\n            ]\n        },\n        toDate(date: string | Date) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        async drillDuplicates(identifier: string){\n            const modal = await modalController.create({\n                component: DrillTable,\n                cssClass: 'custom-modal',\n                componentProps: {\n                    title: 'DrillTable',\n                    columns: [\n                        'Given name', 'Family name', 'Gender', 'Birth date', 'Action'\n                    ],\n                    onRows: async () => {\n                        const patients = await this.service\n                            .getPatientsByIdentifier(identifier)\n                        return patients.map((p: any) => {\n                            const patient = new Patientservice(p)\n                            return [\n                                patient.getGivenName(),\n                                patient.getFamilyName(),\n                                patient.getGender(),\n                                this.toDate(patient.getBirthdate()),\n                                {\n                                    type: 'button',\n                                    name: 'View',\n                                    action: () => {\n                                        modalController.dismiss().then(() => {\n                                            this.$router.push(\n                                                `/patient/dashboard/${patient.getID()}`\n                                            )\n                                        })\n                                    }\n                                }\n                            ]\n                        })\n                    }\n                }\n            })\n            modal.present()\n        },\n        async getRows() {\n            return (await this.service.getDuplicateIndentifiers())\n                .map((i: DuplicateIdentifiersInterface) => ([\n                    table.td(i.identifier),\n                    table.td(i.count),\n                    table.tdBtn('Select', () => this.drillDuplicates(i.identifier)),\n                    table.tdBtn('Resolve', () => {\n                        this.$router.push(`/npid/duplicates/${i.identifier}`)\n                    }, {\n                        event: {\n                            disabled: !(this.dde.isEnabled() \n                                && this.service.getIdentifierType() === 3)\n                        }\n                    }, 'danger')\n                ]))\n        }\n    }\n})\n","import { render } from \"./DuplicateIdentifiers.vue?vue&type=template&id=6aea866d&ts=true\"\nimport script from \"./DuplicateIdentifiers.vue?vue&type=script&lang=ts\"\nexport * from \"./DuplicateIdentifiers.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}