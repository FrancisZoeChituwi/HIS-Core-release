{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue?0bf2","webpack:///./src/apps/CxCa/services/CxCaOutcomeService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaOutcome.vue?9916"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","patientID","providerID","mixins","EncounterMixin","components","HisStandardForm","data","outcome","watch","patient","handler","this","getFields","deep","methods","formData","createEncounter","encounter","programID","getProgramID","getProgramWorkflows","workflows","select_referral_outcome","value","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","state","getLocationName","date","getSessionDate","createState","saveState","referralObs","cancerObs","select_cancer_treatment","buildValueCoded","rOb","obList","match","cOb","push","saveObservationList","nextTask","id","helpText","type","TT_SELECT","validation","val","required","options","label","__exports__"],"mappings":"yIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+B,8BAAkB,qBAEvD,OAAQ,yBAAc,yBAAaA,EAA8B,CAC/DC,OAAQP,EAAKO,OACbC,eAAgBR,EAAKS,SACrBC,aAAa,EACbC,sBAAuBX,EAAKY,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,sJCR3C,cACI,WAAYC,EAAmBC,G,OAC3B,YAAMD,EAAW,IAAKC,IAAW,KAEzC,OAJoC,oBAIpC,EAJA,CAAoC,QCQrB,+BAAgB,CAC7BC,OAAQ,CAACC,EAAA,MACTC,WAAY,CAAEC,gBAAe,QAC7BC,KAAM,WAAM,MAAC,CACXC,QAAS,KAEXC,MAAO,CACLC,QAAS,CACDC,QAAO,W,oGACXC,KAAKJ,QAAU,IAAI,EACjBI,KAAKX,UACLW,KAAKV,YAEPU,KAAKjB,OAASiB,KAAKC,Y,WAErBC,MAAM,IAGVC,QAAS,CACDlB,SAAN,SAAemB,G,gJACK,SAAMJ,KAAKJ,QAAQS,mB,OAErC,OAFMC,EAAY,SAEbA,GACCC,EAAY,OAAeC,eACI,GAAM,OAAeC,oBAAoB,OAAeD,kBAFtE,CAAP,EAAO,eAAa,+B,OAiBlB,OAfZE,EAA+B,SAC/Bd,EAAUQ,EAASO,wBAAwBC,MAC3CC,EAAQ,GACdH,EAAUI,SAAQ,SAAAC,GAChBA,EAAEC,OAAOF,SAAQ,SAAAG,GACf,IAAMC,EAAYD,EAAEE,0BACdC,EAAcH,EAAEI,QAAQC,cAAc,GAAGC,KAC/CV,EAAMO,GAAeF,QAGnBM,EAAQ,CACZ,YAAe,OAAeC,kBAC9BD,MAAOX,EAAMjB,GACb8B,KAAM,OAAeC,kBAEL,GAAM,OAAeC,YAAY5B,KAAKX,UAAWkB,EAAWiB,I,OAC9E,OADMK,EAAY,SACdA,GACEC,EAAc1B,EAASO,wBAAwBC,MAC/CmB,EAAY3B,EAAS4B,wBAAwBpB,MACvC,GAAMZ,KAAKJ,QAAQqC,gBAAgB,UAAWH,KAHpC,CAAP,EAAO,eAAa,2B,cAG7BI,EAAM,SACNC,EAAS,CAACD,GACbH,EAAUK,MAAM,UACL,GAAMpC,KAAKJ,QAAQqC,gBAAgB,mBAAoBF,IADlE,M,OACKM,EAAM,SACZF,EAAOG,KAAKD,G,iBAGF,SAAMrC,KAAKJ,QAAQ2C,oBAAoBJ,I,cAAvC,SACZ,eAAa,uCACbnC,KAAKwC,W,YAGPvC,UAAA,WACE,MAAO,CACL,CACEwC,GAAI,0BACJC,SAAU,mBACVC,KAAM,OAAUC,UAChBC,WAAY,SAACC,GAAa,cAAWC,SAAX,IAC1BC,QAAS,WACP,MAAO,CACL,CACEC,MAAO,mBACPrC,MAAO,oBAET,CACEqC,MAAO,qBACPrC,MAAO,sBAET,CACEqC,MAAO,wBACPrC,MAAO,yBAET,CACEqC,MAAO,qBACPrC,MAAO,yBAKf,CACE6B,GAAI,0BACJC,SAAU,0BACVC,KAAM,OAAUC,UAChBC,WAAY,SAACC,GAAa,cAAWC,SAAX,IAC1BC,QAAS,WACP,MAAO,CACL,CACEC,MAAO,UACPrC,MAAO,WAET,CACEqC,MAAO,kBACPrC,MAAO,mBAET,CACEqC,MAAO,aACPrC,MAAO,cAET,CACEqC,MAAO,QACPrC,MAAO,iB,qBC7GvB,MAAMsC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAS3E,KAErD","file":"js/chunk-2d0a36f9.b44c4e23.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class OutcomeService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 184, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport {ProgramWorkflow} from \"@/interfaces/program_workflow\"\nimport {OutcomeService} from \"@/apps/CxCa/services/CxCaOutcomeService\"\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    outcome: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.outcome = new OutcomeService(\n          this.patientID,\n          this.providerID\n        );\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const encounter = await this.outcome.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] = await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const outcome = formData.select_referral_outcome.value;\n      const flows = {} as any;\n      workflows.forEach(w => {\n        w.states.forEach(f => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        })\n      })\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[outcome],\n        date: ProgramService.getSessionDate()\n      }\n      const saveState = await ProgramService.createState(this.patientID, programID, state);\n      if(!saveState) return toastWarning('Unable to update state')\n      const referralObs = formData.select_referral_outcome.value;\n      const cancerObs = formData.select_cancer_treatment.value;\n      const rOb = await this.outcome.buildValueCoded('Outcome', referralObs);\n      const obList = [rOb];\n      if(cancerObs.match(/cancer/)) {\n        const cOb = await this.outcome.buildValueCoded('Cancer treatment', cancerObs);\n        obList.push(cOb);\n      }\n\n      const obs = await this.outcome.saveObservationList(obList);\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"select_referral_outcome\",\n          helpText: `Referral outcome`,\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n              {\n                label: \"Cancer of cervix\",\n                value: \"Cancer of cervix\",\n              },\n              {\n                label: \"Continue follow-up\",\n                value: \"Continue follow-up\",\n              },\n              {\n                label: \"Discharged uninfected\",\n                value: \"Discharged uninfected\",\n              },\n              {\n                label: \"Treatment complete\",\n                value: \"Treatment complete\",\n              },\n            ];\n          },\n        },\n        {\n          id: \"select_cancer_treatment\",\n          helpText: \"Select cancer treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return [\n              {\n                label: \"Surgery\",\n                value: \"Surgery\",\n              },\n              {\n                label: \"Palliative Care\",\n                value: \"Palliative Care\",\n              },\n              {\n                label: \"Discharged\",\n                value: \"Discharged\",\n              },\n              {\n                label: \"Other\",\n                value: \"Other\",\n              },\n            ];\n          },\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaOutcome.vue?vue&type=template&id=3317e905&ts=true\"\nimport script from \"./CxCaOutcome.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaOutcome.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}