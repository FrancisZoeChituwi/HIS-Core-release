{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/movement.vue?0c9b","webpack:///./src/apps/ART/views/ARTStock/movement.vue","webpack:///./src/apps/ART/views/ARTStock/movement.vue?7bdd"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","enter_batches","errors","index","length","d","value","packSize","getPackSize","drug_id","total","tins","extras","res","authorization","quantity","reason","reasons","task","relocation_location","relocateItems","pharmacy_batch_id","f","push","getShortName","disposeItems","$router","getFields","id","helpText","type","TT_SELECT","validation","val","required","options","label","condition","_","filter","computedValue","config","showKeyboard","isFilterDataViaApi","TT_FULL_DATE","TT_MULTIPLE_SELECT","requireNext","getItems","unload","TT_BATCH_MOVEMENT","formdata","getReasons","TT_TABLE_VIEWER","buildResults","hiddenFooterBtns","columns","rows","map","j","toStandardHisDisplayFormat","expiry","other","prepDrugs","items","this","forEach","element","batchNumber","drugID","parseInt","tabs","date","selectAll","listData","l","isChecked","formatDrugs","mapVal","vals","drug","expiry_date","created","__exports__"],"mappings":"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","file":"js/chunk-2d0d5c2c.364f40d9.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const data = formData.enter_batches;\n      const errors = [];\n      for (let index = 0; index < data.length; index++) {\n        const d = data[index].value;\n        const packSize = StockService.getPackSize(d.drug_id);\n        const total = packSize * d.tins;\n        const extras = {} as any;\n        const res = {\n          'reallocation_code': d.authorization,\n          quantity: total,\n          reason: formData.reasons.value,\n        };\n        if (formData.task.value === \"Relocations\") {\n          extras[\"location_id\"] = formData.relocation_location.value;\n          const f = await this.stockService.relocateItems(d.pharmacy_batch_id, {\n            ...res,\n            ...extras,\n          });\n          if (!f) {\n            errors.push(\n              \"Could not save record for\" + StockService.getShortName(d.drug_id)\n            );\n          }\n        } else {\n          const f = await this.stockService.disposeItems(d.pharmacy_batch_id, {\n            ...res,\n            ...extras,\n          });\n          if (!f) {\n            errors.push(\n              \"Could not save record for\" + StockService.getShortName(d.drug_id)\n            );\n          }\n        }\n      }\n      if (errors.length === 0) {\n        toastSuccess(\"Stock succesfully moved\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(`${errors.length} items could not be moved`);\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"task\",\n          helpText: \"Select task\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Relocations\",\n              value: \"Relocations\",\n            },\n            {\n              label: \"Disposal\",\n              value: \"Disposal\",\n            },\n          ],\n        },\n        {\n          id: \"relocation_location\",\n          helpText: \"Destination\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          condition: (val: any) => val.task.value === \"Relocations\",\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"date\",\n          helpText: \"Set date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.getItems(),\n          unload: (val: any) => (this.selectedDrugs = val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_MOVEMENT,\n          options: () => this.selectedDrugs,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"reasons\",\n          helpText: \"Select reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (formdata: any) => this.getReasons(formdata),\n        },\n        {\n          id: \"summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(drugs: any) {\n      const columns = [\n        \"Drug\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Authorization code\",\n      ];\n      const rows = drugs.map((j: any) => {\n        const d = j.value;\n        return [\n          StockService.getShortName(d.drug_id),\n          d.tins,\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.authorization,\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      formdata.enter_batches.value.forEach((element: any) => {\n        items.push({\n          'batch_number': element.batchNumber,\n          'items': [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    async getItems() {\n      const f = await this.stockService.getItems();\n      return this.formatDrugs(f);\n    },\n    mapVal(vals: string[]) {\n      return vals.map((data) => {\n        return { label: data, value: data };\n      });\n    },\n    getReasons(formdata: any): any {\n      if (formdata.task.value === \"Relocations\") {\n        return this.mapVal([\n          \"Transfer to another facility/relocation\",\n          \"For trainings\",\n        ]);\n      } else {\n        return this.mapVal([\"Expired\", \"Damaged\", \"For trainings\"]);\n      }\n    },\n    formatDrugs(f: any) {\n      return f.map((drug: any) => {\n        return {\n          label: `${StockService.getShortName(\n            drug.drug_id\n          )} (${StockService.getPackSize(\n            drug.drug_id\n          )}) Expiry date: ${HisDate.toStandardHisDisplayFormat(\n            drug.expiry_date\n          )}`,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n  },\n});\n","import { render } from \"./movement.vue?vue&type=template&id=1856be49&ts=true\"\nimport script from \"./movement.vue?vue&type=script&lang=ts\"\nexport * from \"./movement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}