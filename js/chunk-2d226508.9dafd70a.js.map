{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?05cd","webpack:///./src/apps/CxCa/services/CxCaAssessmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?da0d"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","patientID","providerID","mixins","EncounterMixin","components","HisStandardForm","data","assessment","obs","showHIVQuestions","offerCxCa","watch","patient","handler","this","setOfferCxCa","getFields","deep","methods","formData","computed","createEncounter","encounter","vals","Object","keys","forEach","element","push","Promise","all","saveObservationList","nextTask","getFirstValueCoded","buildValueCoded","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","value","resultsAvailable","results_available","getFacilities","filter","id","helpText","type","TT_SELECT","validation","val","required","options","label","computedValue","condition","hiv_status","match","minDate","maxDate","estimation","allowUnknown","computeValue","date","isEstimate","tag","buildValueDate","getDate","reason_for_visit","_","config","showKeyboard","isFilterDataViaApi","buildValueText","offer_CxCa","unload","screening_method","__exports__"],"mappings":"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","file":"js/chunk-2d226508.9dafd70a.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class AssessmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    assessment: {} as any,\n    obs: [] as any,\n    showHIVQuestions: true,\n    offerCxCa: false,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.assessment = new AssessmentService(\n          this.patientID,\n          this.providerID\n        );\n        await this.setOfferCxCa();\n        this.fields = await this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      \n      const encounter = await this.assessment.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n\n      const obs = await this.assessment.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async setOfferCxCa() {\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\n      this.offerCxCa = data && data === \"Yes\";\n      if (!this.offerCxCa) {\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\n      }\n      return true;\n    },\n    enterPreviousCxCaData(formData: any) {\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\n      const resultsAvailable = formData.results_available.value === \"Yes\";\n      return everHadCxCa && resultsAvailable;\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Initial screening\",\n              value: \"Initial screening\",\n            },\n            {\n              label: \"Postponed treatmment\",\n              value: \"Postponed treatment\",\n            },\n            {\n              label: \"One year subsequent check-up after treatment\",\n              value: \"One year subsequent check-up after treatment\",\n            },\n            {\n              label: \"Subsequent screening\",\n              value: \"Subsequent screening\",\n            },\n            {\n              label: \"Problem visit after treatment\",\n              value: \"Problem visit after treatment\",\n            },\n            {\n              label: \"Referral\",\n              value: \"Referral\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\n          })\n        },\n        {\n          id: \"hiv_status\",\n          helpText: \"HIV status\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.showHIVQuestions,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Positive on ART\",\n              value: \"Positive on ART\",\n            },\n            {\n              label: \"Positive Not on ART\",\n              value: \"Positive Not on ART\",\n            },\n            {\n              label: \"Negative\",\n              value: \"Negative\",\n            },\n            {\n              label: \"Never tested\",\n              value: \"Never tested\",\n            },\n            {\n              label: \"Prefers Not to disclose\",\n              value: \"Undisclosed\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"hiv_test_date\",\n            helpText: \"HIV test result date\",\n            required: true,\n            condition: (formData: any) =>\n              formData.hiv_status.value.match(/Negative|ART/i),\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"HIV test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"ever_had_cxca\",\n          helpText: \"Ever had CxCa screening\",\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\",\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\n          })\n        },\n        {\n          id: \"results_available\",\n          helpText: \"Results available?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          \n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\",\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"CxCa screening location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"cxca_date\",\n            helpText: \"Previous CxCa test\",\n            required: true,\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\n              };\n            },\n          },\n          this.assessment.getDate()\n        ),\n        {\n          id: \"previous_screening_method\",\n          helpText: \"Previous screening method\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\n          })\n        },\n        {\n          id: \"offer_CxCa\",\n          helpText: \"Offer CxCa screening today\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\n          })\n        },\n        {\n          id: \"screening_method\",\n          helpText: \"Screening method being offered\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\n          }),\n          unload: async (value: any) => {\n            if (value.value === \"VIA\") {\n              this.obs.push(\n                this.assessment.buildValueCoded(\n                  \"Waiting for test results\",\n                  \"No\"\n                )\n              );\n            }\n          },\n        },\n        {\n          id: \"waiting_for_lab_tests\",\n          helpText: \"Waiting for lab results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) =>\n            !formData.screening_method.value.match(/VIA|EXAM/i),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Waiting for test results\", value.value)\n          }),\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa screening\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\n          options: () => [\n            {\n              label: \"Client preferred counselling\",\n              value: \"Preferred counseling\",\n            },\n            {\n              label: \"Not applicable\",\n              value: \"Not applicable\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=3e6acfeb&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}