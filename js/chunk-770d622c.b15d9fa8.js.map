{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Registration.vue?0fc2","webpack:///./src/apps/OPD/services/patient_registration_service.ts","webpack:///./src/services/patient_identifier_service.ts","webpack:///./src/apps/OPD/views/encounters/Registration.vue","webpack:///./src/apps/OPD/views/encounters/Registration.vue?726f"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","patientID","providerID","patientId","nidType","nid","identifier","components","HisStandardForm","mixins","EncounterMixin","data","registrationService","watch","ready","handler","isReady","patient","getID","getFields","immediate","deep","methods","formData","computedData","asignNID","createEncounter","encounter","resolveObs","registrationData","saveObservationList","registrationObs","nextTask","nidAvailable","create","id","helpText","type","TT_SELECT","validation","value","required","computedValue","obs","buildValueCoded","options","label","buildValueText","condition","visit_type","config","showKeyboard","isFilterDataViaApi","findIdentifierByType","yesNoUnknownOptions","appearInSummary","TT_TEXT","national_id_available","summaryMapValue","isChildBearing","__exports__"],"mappings":"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","file":"js/chunk-770d622c.b15d9fa8.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\r\n\r\nexport class PatientVisitRegistrationService extends AppEncounterService {\r\n    constructor(patientID: number, providerID: number) {\r\n        super(patientID, 104, providerID) \r\n    }\r\n}\r\n","import { Service } from \"./service\"\r\n\r\nexport class PatientIdentifierService extends Service { \r\n    constructor() {\r\n        super()\r\n    }\r\n\r\n    static create(patientId: number, nidType: number, nid: string) { \r\n      return super.postJson('patient_identifiers', {\r\n        identifier: nid,\r\n        'identifier_type': nidType, \r\n        'patient_id': patientId\r\n    })\r\n  }\r\n}\r\n","\r\nimport { defineComponent} from 'vue'\r\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\r\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\r\nimport { PatientVisitRegistrationService } from \"@/apps/OPD/services/patient_registration_service\"\r\nimport { PatientIdentifierService } from \"@/services/patient_identifier_service\";\r\nimport Validation from '@/components/Forms/validations/StandardValidations';\r\nimport { Field, Option } from '@/components/Forms/FieldInterface';\r\nimport { FieldType } from '@/components/Forms/BaseFormElements';\r\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\r\nimport { toastWarning } from '@/utils/Alerts';\r\n\r\nexport default defineComponent({\r\n    components: { HisStandardForm },\r\n    mixins: [EncounterMixinVue],\r\n    data: () => ({\r\n        registrationService: {} as any\r\n    }),\r\n    watch: {\r\n        ready: {\r\n            async handler(isReady: boolean) {\r\n                if(isReady){\r\n                    this.registrationService = new PatientVisitRegistrationService(this.patient.getID(), this.providerID)\r\n                    this.fields = this.getFields()\r\n                }\r\n            },\r\n            immediate: true,\r\n            deep: true\r\n        }\r\n    },\r\n    methods: {\r\n        async onSubmit(formData: any, computedData: any){\r\n            await this.asignNID(formData)\r\n            const encounter = await this.registrationService.createEncounter()\r\n            if (!encounter) return toastWarning('Unable to create registration encounter')\r\n            \r\n            const registrationData = await this.resolveObs({...computedData})\r\n            const registrationObs = await this.registrationService.saveObservationList(registrationData)\r\n            if (!registrationObs) return toastWarning('Unable to save observations')\r\n\r\n            this.nextTask()        \r\n        },\r\n        async asignNID(formData: any) {\r\n            const nidAvailable = formData['national_id_available']\r\n            const nid = formData['national_id']\r\n\r\n            if(nidAvailable && nidAvailable['value'] === 'Yes') {\r\n                // 28 = Malawi National Identifier Type Id\r\n                await PatientIdentifierService.create(this.patient.getID(), 28, nid['value'])\r\n            }\r\n        },\r\n        getFields(): Array<Field>{\r\n            return [\r\n                {\r\n                    id: 'visit_type',\r\n                    helpText: 'Type of visit',\r\n                    type: FieldType.TT_SELECT,\r\n                    validation: (value: any) => Validation.required(value),\r\n                    computedValue: ({value}: Option) => ({ obs: this.registrationService.buildValueCoded('Type of visit', value)}),\r\n                    options: () => {\r\n                        return [\r\n                            { label: 'New', value: 'New patient' },\r\n                            { label: 'Referral', value: 'Referral' },\r\n                            { label: 'Re-visiting', value: 'Re-visiting' },\r\n                        ]\r\n                    }\r\n                },\r\n                {\r\n                    id: 'referring_facility_name',\r\n                    helpText: 'Referred from',\r\n                    type: FieldType.TT_SELECT,\r\n                    validation: (value: any) => Validation.required(value),\r\n                    computedValue: ({ label }: Option) => ({obs: this.registrationService.buildValueText('Referred from', label)}),\r\n                    condition: (fields: any) => fields.visit_type.value === 'Referral',\r\n                    options: () => getFacilities(''),\r\n                    config: {\r\n                        showKeyboard: true,\r\n                        isFilterDataViaApi: true\r\n                    }\r\n                },\r\n                {\r\n                    id: 'national_id_available',\r\n                    helpText: 'National ID avalable',\r\n                    type: FieldType.TT_SELECT,\r\n                    validation: (value: any) => Validation.required(value),\r\n                    condition: () => this.patient.findIdentifierByType('Malawi National ID') === 'Unknown',\r\n                    options: () => this.yesNoUnknownOptions(),\r\n                    appearInSummary: () => false\r\n                },\r\n                {\r\n                    id: 'national_id',\r\n                    helpText: 'Enter National ID',\r\n                    type: FieldType.TT_TEXT,\r\n                    validation: (value: any) => Validation.required(value),\r\n                    condition: (fields: any) => fields.national_id_available.value === 'Yes',\r\n                    summaryMapValue: ({ value }: Option) => ({\r\n                        value,\r\n                        label: 'National ID'\r\n                    })\r\n                },\r\n                {\r\n                    id: 'patient_pregnant',\r\n                    helpText: 'Patient pregnant',\r\n                    type: FieldType.TT_SELECT,\r\n                    validation: (value: any) => Validation.required(value),\r\n                    computedValue: ({value}: Option) => ({obs: this.registrationService.buildValueCoded('PATIENT PREGNANT', value)}),\r\n                    condition: () => this.patient.isChildBearing(),\r\n                    options: () => this.yesNoUnknownOptions(),\r\n                    config: {\r\n                        showKeyboard: true,\r\n                        isFilterDataViaApi: true\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    }\r\n})\r\n","import { render } from \"./Registration.vue?vue&type=template&id=2f0dda5c&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}