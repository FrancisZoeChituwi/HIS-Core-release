{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.find.js","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue?99e7","webpack:///./src/apps/OPD/services/patient_diagnosis_service.ts","webpack:///./src/apps/OPD/services/clinical_notes_service.ts","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue?0b28"],"names":["$","$find","find","addToUnscopables","arrayMethodUsesToLength","FIND","SKIPS_HOLES","USES_TO_LENGTH","Array","target","proto","forced","callbackfn","this","arguments","length","undefined","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","patientID","providerID","conceptSetId","getConceptID","getJson","id","patientId","getFirstValueCoded","malariaTestResult","getFirstValueText","components","HisStandardForm","mixins","EncounterMixin","data","activeField","notesService","diagnosisList","diagnosisService","watch","ready","handler","isReady","getMalariaTestResult","getDiagnosis","getFields","immediate","deep","methods","formData","computedData","createEncounter","resolveObs","diagnosisData","saveObservationList","notesData","nextTask","mapListToOptions","list","map","item","label","name","value","other","concept_id","sort","a","b","checkMalariaResult","malaria","o","helpText","type","TT_MULTIPLE_SELECT","validation","validateSeries","required","options","computedValue","tag","obs","buildValueCodedFromConceptId","summaryMapValue","config","showKeyboard","TT_TEXT","buildValueText","__exports__"],"mappings":"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","file":"js/chunk-6c1c8555.e8251722.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $find = require('../internals/array-iteration').find;\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar FIND = 'find';\nvar SKIPS_HOLES = true;\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength(FIND);\n\n// Shouldn't skip holes\nif (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.find` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables(FIND);\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\r\nimport { ConceptService } from '@/services/concept_service';\r\n\r\nexport class PatientDiagnosisService extends AppEncounterService {\r\n    constructor(patientID: number, providerID: number) {\r\n        super(patientID, 8, providerID) \r\n    }\r\n\r\n    static async getDiagnosis() {\r\n        const conceptSetId = ConceptService.getConceptID('Qech outpatient diagnosis list')\r\n        return AppEncounterService.getJson('concept_set', {\r\n            id: conceptSetId\r\n        })\r\n    }\r\n\r\n    static async getMalariaTestResult(patientId: number) {\r\n        let malariaTestResult = await AppEncounterService.getFirstValueCoded(patientId, 'Malaria Test Result')   \r\n        if(malariaTestResult) return malariaTestResult\r\n\r\n        malariaTestResult = await AppEncounterService.getFirstValueText(patientId, 'Malaria Test Result')\r\n        if(malariaTestResult) return malariaTestResult\r\n\r\n        return null\r\n    }\r\n}\r\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\r\n\r\nexport class ClinicalNotesService extends AppEncounterService {\r\n    constructor(patientID: number, providerID: number) {\r\n        super(patientID, 105, providerID) \r\n    }\r\n}\r\n","\r\nimport { defineComponent} from 'vue'\r\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\r\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\r\nimport { PatientDiagnosisService } from \"@/apps/OPD/services/patient_diagnosis_service\"\r\nimport { ClinicalNotesService } from \"@/apps/OPD/services/clinical_notes_service\";\r\nimport Validation from '@/components/Forms/validations/StandardValidations';\r\nimport { Field, Option } from '@/components/Forms/FieldInterface';\r\nimport { FieldType } from '@/components/Forms/BaseFormElements';\r\nimport { isEmpty } from 'lodash';\r\nimport { ConceptName } from '@/interfaces/conceptName';\r\n\r\nexport default defineComponent({\r\n  components: { HisStandardForm },\r\n  mixins: [EncounterMixinVue],\r\n  data: () => ({\r\n    activeField: '',\r\n    notesService: {} as any,\r\n    diagnosisList: [] as Array<any>,\r\n    diagnosisService: {} as any,\r\n    malariaTestResult: null as null | string\r\n  }),\r\n  watch: {\r\n    ready: {\r\n      async handler(isReady: boolean) {\r\n        if(isReady){\r\n          this.malariaTestResult = await PatientDiagnosisService.getMalariaTestResult(this.patientID)  \r\n          this.notesService = new ClinicalNotesService(this.patientID, this.providerID)\r\n          this.diagnosisService = new PatientDiagnosisService(this.patientID, this.providerID)\r\n          this.diagnosisList = await PatientDiagnosisService.getDiagnosis()\r\n          this.fields = this.getFields()\r\n        }\r\n      },\r\n      immediate: true,\r\n      deep: true\r\n    }\r\n  },\r\n  methods: {\r\n    async onSubmit(formData: any, computedData: any){   \r\n      await this.diagnosisService.createEncounter()\r\n      await this.notesService.createEncounter()\r\n      \r\n      const diagnosisData = await this.resolveObs({...computedData}, 'diagnosis')      \r\n      await this.diagnosisService.saveObservationList(diagnosisData)\r\n\r\n      const notesData = await this.resolveObs({...computedData}, 'notes')\r\n      await this.notesService.saveObservationList(notesData)\r\n\r\n      this.nextTask()        \r\n    },\r\n    mapListToOptions(list: ConceptName[]){\r\n      if(isEmpty(list)) return []\r\n\r\n      return list.map(item => ({\r\n        label: item.name, value: item.name, other: item.concept_id\r\n      })).sort((a, b) => a.label < b.label ? -1 : a.label > b.label ? 1 : 0)\r\n    },\r\n    checkMalariaResult(data: Array<any>){\r\n      const malaria = data.find(o => o.label === 'Malaria')      \r\n      if(malaria) {\r\n        if(!this.malariaTestResult) return ['No malaria test result found']\r\n        if(this.malariaTestResult === 'Negative') return [`Negative malaria test results detected`]\r\n      }\r\n      return null\r\n    },\r\n    getFields(): Array<Field>{\r\n      return [\r\n        {\r\n          id: 'primary_diagnosis',\r\n          helpText: 'Select primary diagnosis',\r\n          type: FieldType.TT_MULTIPLE_SELECT,\r\n          validation: (data: any) => this.validateSeries([\r\n            () => Validation.required(data),\r\n            () => this.checkMalariaResult(data)\r\n          ]),\r\n          options: () => this.mapListToOptions(this.diagnosisList),\r\n          computedValue: (options: Array<Option>) => ({\r\n            tag: 'diagnosis',\r\n            obs: options.map(({other}) => \r\n              this.diagnosisService.buildValueCodedFromConceptId('Primary diagnosis', other))\r\n          }),\r\n          summaryMapValue: ({ value }: Option) => ({\r\n            value,\r\n            label: \"Primary diagnosis\"\r\n          }),\r\n          config: {\r\n            showKeyboard: true,\r\n          }\r\n        },\r\n        {\r\n          id: 'secondary_diagnosis',\r\n          helpText: 'Select secondary diagnosis',\r\n          type: FieldType.TT_MULTIPLE_SELECT,\r\n          options: () => this.mapListToOptions(this.diagnosisList),\r\n          validation: (data: any) => this.checkMalariaResult(data),\r\n          computedValue: (options: Array<Option>) => ({\r\n            tag: 'diagnosis',\r\n            obs: options.map(({other}) => \r\n              this.diagnosisService.buildValueCodedFromConceptId('Secondary diagnosis', other))\r\n          }),\r\n          summaryMapValue: ({ value }: Option) => ({\r\n            value,\r\n            label: \"Secondary diagnosis\"\r\n          }),\r\n          config: {\r\n            showKeyboard: true,\r\n          }\r\n        },\r\n        {\r\n          id: 'clinical_notes',\r\n          helpText: 'Clinical notes',\r\n          type: FieldType.TT_TEXT,\r\n          computedValue: ({value}: Option) => ({\r\n            tag: 'notes',\r\n            obs: this.notesService.buildValueText('Clinical notes construct', value)\r\n          })\r\n        },\r\n      ]\r\n    }\r\n  }\r\n})\r\n","import { render } from \"./Diagnosis.vue?vue&type=template&id=f4f614fa&ts=true\"\nimport script from \"./Diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./Diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}