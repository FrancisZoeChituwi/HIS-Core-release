{"version":3,"sources":["webpack:///./src/apps/LOS/views/Reports/TestRequestedReport.vue?9b84","webpack:///./src/apps/LOS/views/Reports/TestRequestedReport.vue","webpack:///./src/apps/LOS/views/Reports/TestRequestedReport.vue?0ac9"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","title","period","rows","fields","columns","canExportCsv","canExportPDf","reportReady","onReportConfiguration","onPeriod","mixins","ReportMixin","components","ReportTemplate","data","cohort","reportType","patientLevelColumns","thTxt","disaggregatedColumns","created","this","report","getFormFields","methods","type","tests","getDateIntervalPeriod","value","setDisaggregatedRows","setPatientLevelRows","getDateDurationFields","id","helpText","TT_MULTIPLE_SELECT","options","_","x","config","setStartDate","start_date","setEndDate","end_date","getSamplesDrawnReport","availableTests","buildAvailableTests","buildAvailableTestOptions","TT_SELECT","label","orders","forEach","order","test","push","testName","result","length","other","results","males","females","concat","map","i","ageGroupIndex","group","maleRow","td","femaleRow","filterByGender","gender","filter","age_group","drill","d","arv_number","tdDate","birthdate","order_date","join","reason_for_test","__exports__"],"mappings":"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","file":"js/chunk-2d2297b9.c7c1740f.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_report_template = _resolveComponent(\"report-template\")\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    period: _ctx.period,\n    rows: _ctx.rows,\n    fields: _ctx.fields,\n    columns: _ctx.columns,\n    canExportCsv: true,\n    canExportPDf: true,\n    reportReady: _ctx.reportReady,\n    onReportConfiguration: _ctx.onPeriod\n  }, null, 8, [\"title\", \"period\", \"rows\", \"fields\", \"columns\", \"reportReady\", \"onReportConfiguration\"]))\n}","\r\nimport { defineComponent } from 'vue'\r\nimport { LabReportService } from \"@/apps/ART/services/reports/lab_report_service\"\r\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\r\nimport ReportTemplate from \"@/apps/ART/views/reports/TableReportTemplate.vue\"\r\nimport { AGE_GROUPS } from \"@/apps/ART/services/reports/patient_report_service\"\r\nimport { FieldType } from '@/components/Forms/BaseFormElements'\r\nimport { Field } from '@/components/Forms/FieldInterface'\r\nimport { Option } from '@/components/Forms/FieldInterface'\r\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\r\n\r\nexport default defineComponent({\r\n    mixins: [ReportMixin],\r\n    components: { ReportTemplate },\r\n    data: () => ({\r\n        title: 'Tests requested',\r\n        rows: [] as Array<any>,\r\n        cohort: [] as Array<any>,\r\n        reportType: '' as string,\r\n        reportReady: false as boolean,\r\n        columns: [] as Array<any>,\r\n        patientLevelColumns:[ \r\n            [\r\n                table.thTxt('ARV#'), \r\n                table.thTxt('Gender'), \r\n                table.thTxt('Birthdate'), \r\n                table.thTxt('Ordered Date'), \r\n                table.thTxt('Test'), \r\n                table.thTxt('Reason')\r\n            ]\r\n        ],\r\n        disaggregatedColumns: [\r\n            table.thTxt('Age group'), \r\n            table.thTxt('Gender')\r\n        ]\r\n    }),\r\n    created() {\r\n        this.report = new LabReportService()\r\n        this.fields = this.getFormFields()\r\n    },\r\n    methods: {\r\n        async onPeriod({type, tests}: any) {\r\n            this.reportReady = true\r\n            this.rows = []\r\n            this.period = this.report.getDateIntervalPeriod()\r\n            this.reportType = type.value\r\n            if (this.reportType === 'disaggregated') {\r\n                this.setDisaggregatedRows(tests)\r\n            } else if (this.reportType === 'patient_level') {\r\n                this.setPatientLevelRows(tests)\r\n            }\r\n        },\r\n        getFormFields(): Array<Field> {\r\n            return [\r\n                ...this.getDateDurationFields(),\r\n                {\r\n                    id: 'tests',\r\n                    helpText: 'Test(s) Requested',\r\n                    type: FieldType.TT_MULTIPLE_SELECT,\r\n                    options: async (_: any, x: any, config: any) => {\r\n                        this.report.setStartDate(config.start_date)\r\n                        this.report.setEndDate(config.end_date)\r\n                        const data = await this.report.getSamplesDrawnReport()\r\n                        const availableTests = this.buildAvailableTests(data)\r\n                        return this.buildAvailableTestOptions(availableTests)\r\n                    } \r\n                },\r\n                {\r\n                    id: 'type',\r\n                    helpText: 'Select report type',\r\n                    type: FieldType.TT_SELECT,\r\n                    options: () => [\r\n                        {\r\n                            label: 'Disaggregated',\r\n                            value: 'disaggregated',\r\n                        },\r\n                        {\r\n                            label: 'Patient level',\r\n                            value: 'patient_level',\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        buildAvailableTests(orders: any) {\r\n            const tests: Record<string, any> = {}\r\n            orders.forEach((order: any) => {\r\n                order.tests.forEach((test: any) => {\r\n                    if (!(test in tests)) {\r\n                        tests[test] = []\r\n                    }\r\n                    tests[test].push(order)\r\n                })\r\n            })\r\n            return tests\r\n        },\r\n        buildAvailableTestOptions(availableTests: Record<string, any>) {\r\n            const options: Array<Option> = []\r\n            for(const testName in availableTests) {\r\n                const result = availableTests[testName]\r\n                options.push({\r\n                    label: testName,\r\n                    value: result.length,\r\n                    other: result\r\n                })\r\n            }\r\n            return options\r\n        },\r\n        setDisaggregatedRows(results: Array<Option>) {\r\n            const males = []\r\n            const females = []\r\n            this.columns = [this.disaggregatedColumns.concat(results.map((i: any) => table.thTxt(i.label)))]\r\n            for(const ageGroupIndex in AGE_GROUPS) {\r\n                const group = AGE_GROUPS[ageGroupIndex]\r\n                const maleRow: any = [table.td(group), table.td('M')]\r\n                const femaleRow: any = [table.td(group), table.td('F')]\r\n                results.forEach(({other}: Option) => {\r\n                    const filterByGender = (gender: 'F' | 'M') => {\r\n                        return other.filter(\r\n                            (i: any) => i.gender === gender \r\n                                && i.age_group === group\r\n                            ).map((i: any) => i.id)\r\n                    }\r\n                    maleRow.push(this.drill(filterByGender('M')))\r\n                    femaleRow.push(this.drill(filterByGender('F')))\r\n                })\r\n                males.push(maleRow)\r\n                females.push(femaleRow)\r\n                this.rows = [...females, ...males]\r\n            }\r\n        },\r\n        setPatientLevelRows(results: Array<Option>) {\r\n            this.columns = this.patientLevelColumns\r\n            results.forEach(({other}: Option)  => {\r\n                other.forEach((d: any) => {\r\n                    this.rows.push([\r\n                        table.td(d.arv_number),\r\n                        table.td(d.gender),\r\n                        table.tdDate(d.birthdate),\r\n                        table.tdDate(d.order_date),\r\n                        table.td(d.tests.join(',')),\r\n                        table.td(d.reason_for_test)\r\n                    ])\r\n                })\r\n            })\r\n        }\r\n    }\r\n})\r\n","import { render } from \"./TestRequestedReport.vue?vue&type=template&id=14462a38&ts=true\"\nimport script from \"./TestRequestedReport.vue?vue&type=script&lang=ts\"\nexport * from \"./TestRequestedReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}