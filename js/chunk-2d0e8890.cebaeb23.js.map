{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?0ca5","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?a5e9"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","items","prepDrugs","postItems","f","$router","push","getFields","id","helpText","type","TT_BARCODE","config","hiddenFooterBtns","onValue","TT_MULTIPLE_SELECT","requireNext","validation","val","required","options","unload","footerBtns","name","slot","onClick","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","TT_TABLE_VIEWER","d","buildResults","enter_batches","columns","rows","map","j","value","shortName","tabs","tins","toStandardHisDisplayFormat","expiry","batchNumber","label","other","formdata","this","forEach","el","element","drugID","parseInt","date","listData","l","isChecked","formatDrugs","drugList","drug","created","__exports__"],"mappings":"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","file":"js/chunk-2d0e8890.cebaeb23.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\r\nimport { defineComponent } from \"vue\";\r\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\r\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\r\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\r\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\r\nimport HisDate from \"@/utils/Date\";\r\nimport { StockService } from \"./stock_service\";\r\nimport { toastDanger, toastSuccess } from \"@/utils/Alerts\";\r\n\r\nexport default defineComponent({\r\n  components: { HisStandardForm },\r\n  data: () => ({\r\n    activeField: \"\",\r\n    fields: [] as any,\r\n    drugs: [] as any,\r\n    selectedDrugs: [] as any,\r\n    barcode: \"\",\r\n    stockService: {} as any,\r\n  }),\r\n\r\n  methods: {\r\n    async onFinish(formData: any) {\r\n      const items = this.prepDrugs(formData);\r\n      const f = await this.stockService.postItems(items);\r\n      if (f) {\r\n        toastSuccess(\"Stock succesfully added\");\r\n        this.$router.push(\"/\");\r\n      } else {\r\n        toastDanger(\"Could not save stock\");\r\n      }\r\n    },\r\n    getFields(): Array<Field> {\r\n      return [\r\n        {\r\n          id: \"barcode\",\r\n          helpText: \"Scan barcode\",\r\n          type: FieldType.TT_BARCODE,\r\n\r\n          config: {\r\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\r\n          },\r\n          onValue: async (id: string) => {\r\n            this.barcode = id;\r\n            this.activeField = \"select drugs\";\r\n          },\r\n        },\r\n        {\r\n          id: \"select drugs\",\r\n          helpText: \"Select drugs\",\r\n          type: FieldType.TT_MULTIPLE_SELECT,\r\n          requireNext: true,\r\n          validation: (val: any) => Validation.required(val),\r\n          options: () => this.drugs,\r\n          unload: (val: any) => (this.selectedDrugs = val),\r\n          config: {\r\n            footerBtns: [\r\n              {\r\n                name: \"Select all\",\r\n                slot: \"end\",\r\n                onClick: () => {\r\n                  this.selectAll(this.drugs);\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        },\r\n        {\r\n          id: \"date\",\r\n          helpText: \"Set date\",\r\n          type: FieldType.TT_FULL_DATE,\r\n          validation: (val: Option) => Validation.required(val),\r\n        },\r\n        {\r\n          id: \"enter_batches\",\r\n          helpText: \"Batch entry\",\r\n          type: FieldType.TT_BATCH_ENTRY,\r\n          options: () => this.selectedDrugs,\r\n          validation: (val: Option) => Validation.required(val),\r\n        },\r\n        {\r\n          id: \"adherence_report\",\r\n          helpText: \"Summary\",\r\n          type: FieldType.TT_TABLE_VIEWER,\r\n          options: (d: any) => this.buildResults(d.enter_batches),\r\n          config: {\r\n            hiddenFooterBtns: [\"Clear\"],\r\n          },\r\n        },\r\n      ];\r\n    },\r\n    buildResults(d: any) {\r\n      const columns = [\r\n        \"Drug\",\r\n        \"Amount per unit\",\r\n        \"Total units\",\r\n        \"Expiry date\",\r\n        \"Batch number\",\r\n      ];\r\n      const rows = d.map((j: any) => {\r\n        const d = j.value;\r\n        return [\r\n          d.shortName,\r\n          d.tabs,\r\n          d.tins,\r\n          HisDate.toStandardHisDisplayFormat(d.expiry),\r\n          d.batchNumber,\r\n        ];\r\n      });\r\n      return [\r\n        {\r\n          label: \"Confirm entry\",\r\n          value: \"Table\",\r\n          other: { columns, rows },\r\n        },\r\n      ];\r\n    },\r\n    prepDrugs(formdata: any) {\r\n      const items: any[] = [];\r\n      const barcode = this.barcode;\r\n      formdata.enter_batches.forEach((el: any) => {\r\n        const element = el.value;\r\n        items.push({\r\n          'batch_number': element.batchNumber,\r\n          items: [\r\n            {\r\n              'barcode': barcode,\r\n              'drug_id': element.drugID,\r\n              'expiry_date': element.expiry,\r\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\r\n              'delivery_date': formdata.date.value,\r\n            },\r\n          ],\r\n        });\r\n      });\r\n      return items;\r\n    },\r\n    selectAll(listData: Array<Option>) {\r\n      return listData.map((l) => {\r\n        l.isChecked = true;\r\n        return l;\r\n      });\r\n    },\r\n    formatDrugs() {\r\n      return this.stockService.drugList().map((drug: any) => {\r\n        return {\r\n          label: drug.shortName,\r\n          value: drug,\r\n        };\r\n      });\r\n    },\r\n  },\r\n  created() {\r\n    this.stockService = new StockService();\r\n    this.fields = this.getFields();\r\n    this.drugs = this.formatDrugs();\r\n  },\r\n});\r\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=de10ecf2&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}