{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaScreeningResult.vue?5fd9","webpack:///./src/apps/CxCa/services/CxCaScreeningResultService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaScreeningResult.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaScreeningResult.vue?1f4c"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","patientID","providerID","mixins","EncounterMixin","components","HisStandardForm","data","screeningResult","obs","currentMethod","watch","patient","handler","getTreatmentOptions","getFields","deep","methods","formData","computed","createEncounter","encounter","treatment_option","value","push","buildValueText","label","vals","Object","keys","forEach","element","Promise","all","saveObservationList","nextTask","getFacilities","filter","getFirstValueCoded","getOptions","method","this","gotoPatientDashboard","match","id","helpText","type","TT_SELECT","validation","val","required","options","mapOptions","computedValue","buildValueCoded","yesNoOptions","condition","screening_result","offer_via","_","config","showKeyboard","isFilterDataViaApi","__exports__"],"mappings":"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","file":"js/chunk-2d21e7b5.640e2886.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ScreeningResultService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 186, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport {ScreeningResultService} from \"@/apps/CxCa/services/CxCaScreeningResultService\"\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    screeningResult: {} as any,\n    obs: [] as any,\n    currentMethod: ''\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.screeningResult = new ScreeningResultService(\n          this.patientID,\n          this.providerID\n        );\n        this.currentMethod = await this.getTreatmentOptions(); \n        this.fields = this.getFields();\n        \n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.screeningResult.createEncounter();\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      if(formData.treatment_option && formData.treatment_option.value === \"Referral\") {\n        this.obs.push(this.screeningResult.buildValueText('Referral location', formData['location'].label))\n      }\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n      await this.screeningResult.saveObservationList(data);\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    async getTreatmentOptions() {\n      return await this.screeningResult.getFirstValueCoded('CxCa screening method');\n    },\n    getOptions(method: string) {\n      if(!method) {\n        \n        toastWarning(\"No screening methods have been selected\");\n        this.gotoPatientDashboard();\n\n      }\n      if(method.match(/via/i)){\n        return [\"VIA Negative\",\"VIA Positive\",\"Suspect Cancer\"];\n      }else if(method.match(/smear/i)){\n        return [\"PAP Smear Normal\",\"PAP Smear Abnormal\"];\n      }else if(method.match(/HPV DNA/i)){\n        return [\"HPV positive\",\"HPV negative\"];\n      }else if(method.match(/Speculum/i)){\n        return [\"Visible Lesion\",\"No visible Lesion\",\"Other Gynae\"];\n      }\n      return []\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"screening_result\",\n          helpText: \"Screening Result\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.mapOptions([...this.getOptions(this.currentMethod)]),\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Patient went for VIA?', value.value)\n          })\n        },\n        {\n          id: \"offer_via\",\n          helpText: \"Offer VIA\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          condition(formData: any) {\n            return formData.screening_result.value === \"HPV Positive\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Patient went for VIA?', value.value)\n          })\n        },\n        {\n          id: \"via_screening_results\",\n          helpText: \"VIA screening results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"VIA negative\",\n              \"VIA positive\",\n              \"Suspect cancer\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.offer_via.value === \"Yes\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('VIA Results', value.value)\n          })\n        },\n        {\n          id: \"reason_for_not_offering_via\",\n          helpText: \"Reason for NOT offering VIA\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Client NOT ready\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.offer_via.value === \"No\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Other reason for not seeking services', value.value)\n          })\n        },\n        {\n          id: \"treatment_option\",\n          helpText: \"Enter treatment option\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Same day treatment\",\n              \"Postponed treatment\",\n              \"Referral\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.screening_result.value === \"VIA Positive\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Directly observed treatment option', value.value)\n          })\n        },\n        {\n          id: \"postponed_reason\",\n          helpText: \"Select reason for postponing treatment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Client not ready\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Postponed treatment\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Postponed reason', value.value)\n          })\n        },\n        {\n          id: \"referral_rreason\",\n          helpText: \"Referral reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => {\n            return this.mapOptions([\n              \"Further Investigation and Management\",\n              \"Large Lesion (Greater than 75 percent)\",\n              \"Suspect cancer\",\n              \"Unable to treaat client\",\n              \"Treatment not available\",\n              \"Other conditions\",\n            ]);\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Referral\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueCoded('Referral reason', value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"Location reffered from\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition(formData: any) {\n            return formData.treatment_option.value === \"Referral\";\n          },\n          computedValue: (value: any) => ({\n            obs: this.screeningResult.buildValueText('Referral location', value.label)\n          })\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaScreeningResult.vue?vue&type=template&id=3af8bc22&ts=true\"\nimport script from \"./CxCaScreeningResult.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaScreeningResult.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}