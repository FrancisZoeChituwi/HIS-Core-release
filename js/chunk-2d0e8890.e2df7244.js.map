{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?0388","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue","webpack:///./src/apps/ART/views/ARTStock/enter_receipts.vue?a5e9"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","activeField","onFinishAction","onFinish","skipSummary","onOnIndex","$event","cancelDestinationPath","cancelDestination","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","items","this","prepDrugs","postItems","f","$router","push","getFields","id","helpText","type","TT_BARCODE","config","hiddenFooterBtns","onValue","TT_MULTIPLE_SELECT","requireNext","validation","val","required","options","unload","footerBtns","name","slot","onClick","selectAll","TT_FULL_DATE","TT_BATCH_ENTRY","beforeNext","_","c","currentFieldContext","drugsToStr","map","b","i","join","drugsWithoutBatches","filter","drug","entries","d","tins","expiry","every","Boolean","partialBatches","e","score","batchNumber","some","partialDrugs","batchlessDrugs","v","TT_TABLE_VIEWER","buildResults","columns","rows","j","value","shortName","tabs","toStandardHisDisplayFormat","label","other","formdata","enter_batches","forEach","el","element","drugID","parseInt","date","listData","l","isChecked","formatDrugs","drugList","created","__exports__"],"mappings":"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","file":"js/chunk-2d0e8890.e2df7244.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[1] || (_cache[1] = $event => (_ctx.activeField='')),\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { isEmpty } from \"lodash\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = this.prepDrugs(formData);\n      const f = await this.stockService.postItems(items);\n      if (f) {\n        toastSuccess(\"Stock succesfully added\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"barcode\",\n          helpText: \"Scan barcode\",\n          type: FieldType.TT_BARCODE,\n\n          config: {\n            hiddenFooterBtns: [\"Clear\", \"Next\"],\n          },\n          onValue: async (id: string) => {\n            this.barcode = id;\n            this.activeField = \"select drugs\";\n          },\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.drugs,\n          unload: (val: any) => (this.selectedDrugs = val),\n          config: {\n            footerBtns: [\n              {\n                name: \"Select all\",\n                slot: \"end\",\n                onClick: () => {\n                  this.selectAll(this.drugs);\n                },\n              },\n            ],\n          },\n        },\n        {\n          id: \"date\",\n          helpText: \"Delivery Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_ENTRY,\n          options: () => this.selectedDrugs,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const drugsWithoutBatches = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !d.tins && !d.expiry && !d.batchNumber).every(Boolean)\n            )\n            const partialBatches = currentFieldContext.drugs.filter((drug: any) => {\n              return drug.entries.map((e: any) => {\n                let score = 0\n                if (e.tins) score += 1\n                if (e.expiry) score += 1\n                if (e.batchNumber) score += 1\n                return score >= 1 && score <= 2 \n              }).some(Boolean)\n            })\n            if (!isEmpty(partialBatches)) {\n              const partialDrugs = drugsToStr(partialBatches)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            if (!isEmpty(drugsWithoutBatches)) {\n              const batchlessDrugs = drugsToStr(drugsWithoutBatches)\n              toastWarning(`The following drug batches are empty: ${batchlessDrugs}`)\n              return false\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"adherence_report\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(d: any) {\n      const columns = [\n        \"Drug\",\n        \"Amount per unit\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Batch number\",\n      ];\n      const rows = d.map((j: any) => {\n        const d = j.value;\n        return [\n          d.shortName,\n          d.tabs,\n          d.tins,\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.batchNumber,\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      formdata.enter_batches.forEach((el: any) => {\n        const element = el.value;\n        items.push({\n          'batch_number': element.batchNumber,\n          items: [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs() {\n      return this.stockService.drugList().map((drug: any) => {\n        return {\n          label: drug.shortName,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n    this.drugs = this.formatDrugs();\n  },\n});\n","import { render } from \"./enter_receipts.vue?vue&type=template&id=186ddd8f&ts=true\"\nimport script from \"./enter_receipts.vue?vue&type=script&lang=ts\"\nexport * from \"./enter_receipts.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}