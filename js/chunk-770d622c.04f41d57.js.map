{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Registration.vue?0fc2","webpack:///./src/apps/OPD/services/patient_registration_service.ts","webpack:///./src/services/patient_identifier_service.ts","webpack:///./src/apps/OPD/views/encounters/Registration.vue","webpack:///./src/apps/OPD/views/encounters/Registration.vue?726f"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","patientID","providerID","create","patientId","nidType","nid","postJson","identifier","components","HisStandardForm","mixins","EncounterMixin","data","registrationService","watch","ready","handler","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","asignNID","createEncounter","encounter","resolveObs","registrationData","saveObservationList","registrationObs","nextTask","nidAvailable","id","helpText","type","TT_SELECT","validation","value","required","computedValue","obs","buildValueCoded","options","label","buildValueText","condition","visit_type","config","showKeyboard","isFilterDataViaApi","findIdentifierByType","appearInSummary","TT_TEXT","national_id_available","summaryMapValue","__exports__"],"mappings":"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","file":"js/chunk-770d622c.04f41d57.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientVisitRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 104, providerID) \n    }\n}\n","import { Service } from \"./service\"\n\nexport class PatientIdentifierService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(patientId: number, nidType: number, nid: string) { \n      return super.postJson('patient_identifiers', {\n        identifier: nid,\n        'identifier_type': nidType, \n        'patient_id': patientId\n    })\n  }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientVisitRegistrationService } from \"@/apps/OPD/services/patient_registration_service\"\nimport { PatientIdentifierService } from \"@/services/patient_identifier_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        registrationService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.registrationService = new PatientVisitRegistrationService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            await this.asignNID(formData)\n            const encounter = await this.registrationService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create registration encounter')\n            \n            const registrationData = await this.resolveObs({...computedData})\n            const registrationObs = await this.registrationService.saveObservationList(registrationData)\n            if (!registrationObs) return toastWarning('Unable to save observations')\n\n            this.nextTask()        \n        },\n        async asignNID(formData: any) {\n            const nidAvailable = formData['national_id_available']\n            const nid = formData['national_id']\n\n            if(nidAvailable && nidAvailable['value'] === 'Yes') {\n                // 28 = Malawi National Identifier Type Id\n                await PatientIdentifierService.create(this.patient.getID(), 28, nid['value'])\n            }\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'visit_type',\n                    helpText: 'Type of visit',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({ obs: this.registrationService.buildValueCoded('Type of visit', value)}),\n                    options: () => {\n                        return [\n                            { label: 'New', value: 'New patient' },\n                            { label: 'Referral', value: 'Referral' },\n                            { label: 'Re-visiting', value: 'Re-visiting' },\n                        ]\n                    }\n                },\n                {\n                    id: 'referring_facility_name',\n                    helpText: 'Referred from',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.registrationService.buildValueText('Referred from', label)}),\n                    condition: (fields: any) => fields.visit_type.value === 'Referral',\n                    options: () => getFacilities(''),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                {\n                    id: 'national_id_available',\n                    helpText: 'National ID avalable',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: () => this.patient.findIdentifierByType('Malawi National ID') === 'Unknown',\n                    options: () => this.yesNoUnknownOptions(),\n                    appearInSummary: () => false\n                },\n                {\n                    id: 'national_id',\n                    helpText: 'Enter National ID',\n                    type: FieldType.TT_TEXT,\n                    validation: (value: any) => Validation.required(value),\n                    condition: (fields: any) => fields.national_id_available.value === 'Yes',\n                    summaryMapValue: ({ value }: Option) => ({\n                        value,\n                        label: 'National ID'\n                    })\n                },\n                {\n                    id: 'patient_pregnant',\n                    helpText: 'Patient pregnant',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({value}: Option) => ({obs: this.registrationService.buildValueCoded('PATIENT PREGNANT', value)}),\n                    condition: () => this.patient.isChildBearing(),\n                    options: () => this.yesNoUnknownOptions(),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=2f0dda5c&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}