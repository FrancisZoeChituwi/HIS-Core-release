{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/verification.vue?1c27","webpack:///./src/apps/ART/views/ARTStock/verification.vue","webpack:///./src/apps/ART/views/ARTStock/verification.vue?3832"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","items","enter_batches","errors","index","length","element","value","vals","reason","this","updateItem","f","push","shortName","$router","getFields","id","helpText","type","TT_FULL_DATE","validation","val","required","TT_BATCH_VERIFICATION","options","TT_SELECT","label","TT_TABLE_VIEWER","d","buildResults","config","hiddenFooterBtns","columns","rows","map","j","toStandardHisDisplayFormat","expiry_date","other","prepDrugs","formdata","forEach","batchNumber","drugID","expiry","parseInt","tabs","tins","date","selectAll","listData","l","isChecked","formatDrugs","drugList","drug","created","__exports__"],"mappings":"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","file":"js/chunk-2d0e2514.b35d02cc.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport  { StockService } from \"./stock_service\";\nimport { toastDanger, toastSuccess } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const items = formData.enter_batches;\n      const errors = [];\n      for (let index = 0; index < items.length; index++) {\n        const element = items[index].value;\n        const vals = {\n                \"current_quantity\": element['current_quantity'],\n                \"reason\": formData.reason.value\n            };\n            const f = await this.stockService.updateItem(element['pharmacy_batch_id'], vals)\n            if(!f) {\n              errors.push('could not stock for ' + items[index].shortName);\n            }\n      }\n      if (errors.length === 0) {\n        toastSuccess(\"Stock succesfully updated\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(\"Could not save stock\");\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"date\",\n          helpText: \"Verfication Date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_VERIFICATION,\n          options: () => this.drugs,\n          validation: (val: Option) => Validation.required(val),\n        },\n        {\n          id: \"reason\",\n          helpText: \"Select reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Monthly stock take\",\n              value: \"Monthly stock take\",\n            },\n            {\n              label: \"Audit\",\n              value: \"Audit\",\n            },\n            {\n              label: \"Adhoc (due to stock imbalance)\",\n              value: \"Adhoc (due to stock imbalance)\",\n            },\n            {\n              label: \"Supervision\",\n              value: \"Supervision\",\n            },\n          ],\n        },\n        {\n          id: \"verification_summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d.enter_batches),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(drugs: any) {\n      const columns = [\n        \"Drug\",\n        \"Total units\",\n        \"Expiry date\",\n      ];\n      const rows = drugs.map((j: any) => {\n        const d = j.value;\n        return [\n          d.shortName,\n          d['current_quantity'],\n          HisDate.toStandardHisDisplayFormat(d.expiry_date),\n        ];\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      \n      formdata.enter_batches.value.forEach((element: any) => {\n        items.push({\n          'batch_number': element.batchNumber,\n          items: [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    formatDrugs() {\n      return this.stockService.drugList().map((drug: any) => {\n        return {\n          label: drug.shortName,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n    this.drugs = this.formatDrugs();\n  },\n});\n","import { render } from \"./verification.vue?vue&type=template&id=046fe90a&ts=true\"\nimport script from \"./verification.vue?vue&type=script&lang=ts\"\nexport * from \"./verification.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}