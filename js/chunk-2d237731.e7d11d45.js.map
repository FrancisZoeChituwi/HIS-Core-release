{"version":3,"sources":["webpack:///./src/apps/LOS/views/OrderTests.vue?7233","webpack:///./src/apps/LOS/views/OrderTests.vue","webpack:///./src/apps/LOS/views/OrderTests.vue?93f0"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","onFinishAction","onSubmit","mixins","EncounterMixin","data","patientID","service","activityType","watch","handler","query","params","this","patient_id","type","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getTestCombinationField","immediate","deep","methods","_","computed","placeOrder","req","printSpecimenLabel","order_id","$router","push","id","helpText","TT_SELECT","defaultValue","getLocationName","validation","val","required","options","filter","computedValue","label","config","showKeyboard","isFilterDataViaApi","field","getGivenNameField","proxyID","condition","appearInSummary","getFamilyNameField","summaryMapValue","v","f","value","given_name","getCachedConceptID","getSpecimens","map","d","name","concept_id","fieldContext","TT_MULTIPLE_SELECT","onload","context","specimen","getTestTypesBySpecimen","listData","getTestTypes","t","other","tests","length","yesNoOptions","__exports__"],"mappings":"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","file":"js/chunk-2d237731.e7d11d45.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\r\nimport { defineComponent } from 'vue'\r\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\r\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\r\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\r\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\r\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\r\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\r\nimport { OrderService } from \"@/services/order_service\"\r\nimport { ConceptService } from '@/services/concept_service'\r\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\r\nimport { isEmpty } from 'lodash'\r\n\r\nexport default defineComponent({\r\n    mixins: [EncounterMixinVue],\r\n    data: () => ({\r\n        patientID: -1,\r\n        service: {} as any,\r\n        fields: [] as Field[],\r\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\r\n    }),\r\n    watch: {\r\n        '$route': {\r\n            handler({query, params}: any) {\r\n                if (query && params) {\r\n                    this.patientID = params.patient_id\r\n                    this.activityType = query.type\r\n                    this.service = new PatientLabService(this.patientID)\r\n                    this.fields = [\r\n                        this.getClinianGivenNameField(),\r\n                        this.getClinianFamilyNameField(),\r\n                        this.getFacililityLocationField(),\r\n                        this.getReasonForTestField(),\r\n                        this.getTestSpecimensField(),\r\n                        this.getTestSelectionField(),\r\n                        this.getTestCombinationField()\r\n                    ]\r\n                }\r\n            },\r\n            immediate: true,\r\n            deep: true\r\n        },\r\n    },\r\n    methods: {\r\n        async onSubmit(_: any, computed: any) {\r\n            const req = await this.service.placeOrder(computed)\r\n            if (req) {\r\n                await this.service.printSpecimenLabel(req[0].order_id)\r\n                this.$router.push(`/patient/dashboard/${this.patientID}`)\r\n            } \r\n        },\r\n        getFacililityLocationField(): Field {\r\n            return {\r\n                id: 'target_lab',\r\n                helpText: 'Requesting location',\r\n                type: FieldType.TT_SELECT,\r\n                defaultValue: () => PatientLabService.getLocationName(),\r\n                validation: (val: Option) => Validation.required(val),\r\n                options: (_: any, filter='') => getFacilities(filter),\r\n                computedValue: (val: Option) => val.label,\r\n                config: {\r\n                    showKeyboard: true,\r\n                    isFilterDataViaApi: true\r\n                }\r\n            }\r\n        },\r\n        getClinianGivenNameField(): Field {\r\n            const field = PersonField.getGivenNameField()\r\n            field.helpText = 'Requesting clinician - First name'\r\n            field.proxyID = 'requesting_clinician'\r\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\r\n            field.appearInSummary = () => false\r\n            return field\r\n        },\r\n        getClinianFamilyNameField(): Field {\r\n            const field = PersonField.getFamilyNameField()\r\n            field.helpText = 'Requesting clinician - Last name'\r\n            field.proxyID = 'requesting_clinician'\r\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\r\n            field.summaryMapValue = (v: any, f: any) => {\r\n                return {\r\n                    label: 'Clinician name', \r\n                    value: `${f.given_name.value} ${v.value}`\r\n                }\r\n            },\r\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\r\n            return field\r\n        },\r\n        getReasonForTestField(): Field {\r\n            return {\r\n                id: 'reason_for_test_id',\r\n                helpText: 'Reason for test',\r\n                type: FieldType.TT_SELECT,\r\n                validation: (val: Option) => Validation.required(val),\r\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\r\n                    val.value, true\r\n                ),\r\n                options: () => [\r\n                    {label: 'Routine', value: 'Routine'},\r\n                    {label: 'Targeted', value: 'Targeted'},\r\n                    {label: 'Confirmatory', value: 'Confirmatory'},\r\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\r\n                    {label: 'Stat', value: 'Stat'}\r\n                ]\r\n            }\r\n        },\r\n        getTestSpecimensField(): Field {\r\n            return { \r\n                id: 'specimen',\r\n                helpText: 'Select specimen',\r\n                type: FieldType.TT_SELECT,\r\n                condition: () => this.activityType === 'DRAW_SAMPLES',\r\n                validation: (val: Option) => Validation.required(val),\r\n                computedValue: (v: Option) => ({'concept_id': v.value}),\r\n                options: async () => {\r\n                    const req = await OrderService.getSpecimens('')\r\n                    return req.map((d: any) => ({\r\n                        label: d.name, \r\n                        value: d.concept_id\r\n                    }))\r\n                },\r\n                config: {\r\n                    showKeyboard: true\r\n                }\r\n            }\r\n        },\r\n        getTestSelectionField(): Field {\r\n            let fieldContext: any = {}\r\n            return {\r\n                id: 'tests',\r\n                helpText: 'Select tests',\r\n                type: FieldType.TT_MULTIPLE_SELECT,\r\n                onload: (context: any) => fieldContext = context,\r\n                validation: (val: Option) => Validation.required(val),\r\n                computedValue: (val: Array<Option>) => {\r\n                    return val.map(v => ({'concept_id': v.value}))\r\n                },\r\n                options: async (f: any) => {\r\n                    let req: any = {}\r\n \r\n                    if (f.specimen) {\r\n                        req = await OrderService.getTestTypesBySpecimen(\r\n                            f.specimen.label\r\n                        )\r\n                    } else {\r\n                        if (!isEmpty(fieldContext.listData)) {\r\n                            return fieldContext.listData\r\n                        } \r\n                        req = await OrderService.getTestTypes()\r\n                    }\r\n\r\n                    return req.map((t: any) => ({\r\n                        label: t.name,\r\n                        value: t.concept_id,\r\n                        other: t\r\n                    }))\r\n                }\r\n            }\r\n        },\r\n        getTestCombinationField(): Field {\r\n            return {\r\n                id: 'combine_tests',\r\n                helpText: 'Combine test(s) in one order',\r\n                type: FieldType.TT_SELECT,\r\n                computedValue: (val: Option) => val.value === 'Yes',\r\n                condition: (f: any) => f.tests.length > 1,\r\n                validation: (val: Option) => Validation.required(val),\r\n                options: () => this.yesNoOptions()\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { render } from \"./OrderTests.vue?vue&type=template&id=6b154bf6&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}