{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?8e8d","webpack:///./src/apps/OPD/services/hiv_status_service.ts","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?1881"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","patientID","providerID","components","HisStandardForm","mixins","EncounterMixin","data","hivService","watch","ready","handler","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","createEncounter","encounter","resolveObs","saveObservationList","obs","nextTask","buildDateObs","conceptName","date","isEstimate","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","TT_SELECT","validation","value","required","computedValue","options","label","minDate","condition","hiv_status","summaryLabel","estimation","allowUnknown","computeValue","getDate","_","filter","config","showKeyboard","__exports__"],"mappings":"uIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+B,8BAAkB,qBAEvD,OAAQ,yBAAc,yBAAaA,EAA8B,CAC/DC,sBAAuBP,EAAKQ,kBAC5BC,OAAQT,EAAKS,OACbC,eAAgBV,EAAKW,UACpB,KAAM,EAAG,CAAC,wBAAyB,SAAU,mB,oICPlD,cACI,WAAYC,EAAmBC,G,OAC3B,YAAMD,EAAW,GAAIC,IAAW,KAExC,OAJsC,oBAItC,EAJA,CAAsC,QCUvB,+BAAgB,CAC3BC,WAAY,CAAEC,gBAAe,QAC7BC,OAAQ,CAACC,EAAA,MACTC,KAAM,WAAM,MAAC,CACTC,WAAY,KAEhBC,MAAO,CACHC,MAAO,CACGC,QAAN,SAAcC,G,oGACPA,IACCC,KAAKL,WAAa,IAAI,EAAiBK,KAAKC,QAAQC,QAASF,KAAKX,YAClEW,KAAKf,OAASe,KAAKG,a,WAG3BC,WAAW,EACXC,MAAM,IAGdC,QAAS,CACCnB,SAAN,SAAeoB,EAAeC,G,8HACR,SAAMR,KAAKL,WAAWc,mB,OACxC,OADMC,EAAY,SACbA,EACQ,GAAMV,KAAKW,WAAU,kBAAKH,KADhB,CAAP,EAAO,eAAa,+B,OAExB,OADNd,EAAO,SACD,GAAMM,KAAKL,WAAWiB,oBAAoBlB,I,OACtD,OADMmB,EAAM,SACPA,GACLb,KAAKc,W,KADY,CAAP,EAAO,eAAa,wCAGlCC,aAAA,SAAaC,EAAqBC,EAAcC,GAC5C,IAAIL,EAAM,GAQV,OANIA,EADAI,EAAKE,MAAM,YACLnB,KAAKL,WAAWyB,eAAeJ,EAAa,WAC3CE,EACDlB,KAAKL,WAAW0B,wBAAwBL,EAAaC,GAErDjB,KAAKL,WAAW2B,eAAeN,EAAaC,GAE/CJ,GAEXV,UAAA,sBACI,uBACI,CACIoB,GAAI,aACJC,SAAU,aACVC,KAAM,OAAUC,UAChBC,WAAY,SAACC,GAAe,cAAWC,SAAX,IAC5BC,cAAe,SAAC,G,IAAEF,EAAK,QAAe,MAAC,CACnCf,IAAK,EAAKlB,WAAWyB,eAAe,aAAcQ,KAEtDG,QAAS,WAAM,MAAC,CACZ,CAAEC,MAAO,mBAAoBJ,MAAO,oBACpC,CAAEI,MAAO,mBAAoBJ,MAAO,mBACpC,CAAEI,MAAO,oBAAqBJ,MAAO,qBACrC,CAAEI,MAAO,eAAgBJ,MAAO,gBAChC,CAAEI,MAAO,eAAgBJ,MAAO,gBAChC,CAAEI,MAAO,eAAgBJ,MAAO,oBAGrC,eAAmB,CAClBL,GAAI,gBACJC,SAAU,WACVK,UAAU,EACVI,QAAS,WAAM,SAAKhC,QAAL,gBACfiC,UAAW,SAACjD,GAAgB,uBAAAA,EAAOkD,WAAWP,OAC9CQ,aAAc,gBACdC,WAAY,CACRC,cAAc,GAElBC,aAAc,SAACtB,EAAcC,GAAwB,SAAKH,aAAa,gBAAiBE,EAAnC,KAEtDjB,KAAKL,WAAW6C,WAAU,CAC7B,CACIjB,GAAI,gBACJC,SAAU,oBACVC,KAAM,OAAUC,UAChBC,WAAY,SAACC,GAAe,cAAWC,SAAX,IAC5BC,cAAe,SAAC,G,IAAEE,EAAK,QAAe,MAAC,CAACnB,IAAK,EAAKlB,WAAWyB,eAAe,oBAAqBY,KACjGE,UAAW,SAACjD,GAAgB,uBAAAA,EAAOkD,WAAWP,OAC9CG,QAAS,SAACU,EAAQC,GAAc,YAAd,IAAAA,MAAA,IAAc,eAAcA,IAC9CC,OAAQ,CACJC,cAAc,U,qBCtFtC,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAAStE,KAErD","file":"js/chunk-2d0de711.16a5c58c.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class HIVStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 39, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper';\nimport { toastWarning } from '@/utils/Alerts';\nimport { HIVStatusService } from '../../services/hiv_status_service';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        hivService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.hivService = new HIVStatusService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.hivService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create encounter') \n            const data = await this.resolveObs({...computedData})\n            const obs = await this.hivService.saveObservationList(data)\n            if (!obs) return toastWarning('Unable to save observations')\n            this.nextTask()        \n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.hivService.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.hivService.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.hivService.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'hiv_status',\n                    helpText: 'HIV status',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ value }: Option) => ({\n                        obs: this.hivService.buildValueText('HIV status', value)\n                    }),\n                    options: () => ([\n                        { label: 'Positive not ART', value: 'Positive not ART' },\n                        { label: 'Posititve on ART', value: 'Positive on ART' },\n                        { label: 'Previous negative', value: 'Previous negative' },\n                        { label: 'New positive', value: 'New positive' },\n                        { label: 'New negative', value: 'New negative' },\n                        { label: 'Never tested', value: 'Never tested' },\n                    ])\n                },\n                ...generateDateFields({\n                    id: 'hiv_test_date',\n                    helpText: 'HIV Test',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    summaryLabel: 'HIV test date',\n                    estimation: {\n                        allowUnknown: true\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => this.buildDateObs('HIV test date', date, isEstimate)\n                    \n                }, this.hivService.getDate()),\n                {\n                    id: 'test_location',\n                    helpText: 'HIV test location',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ label }: Option) => ({obs: this.hivService.buildValueText('HIV test location', label)}),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./HIVStatus.vue?vue&type=template&id=7a863b66&ts=true\"\nimport script from \"./HIVStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./HIVStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}