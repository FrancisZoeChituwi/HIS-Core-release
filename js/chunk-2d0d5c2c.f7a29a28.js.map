{"version":3,"sources":["webpack:///./src/apps/ART/views/ARTStock/movement.vue?8a14","webpack:///./src/apps/ART/views/ARTStock/movement.vue","webpack:///./src/apps/ART/views/ARTStock/movement.vue?7bdd"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","activeField","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","components","HisStandardForm","data","drugs","selectedDrugs","barcode","stockService","methods","formData","enter_batches","errors","index","length","d","value","packSize","getPackSize","drug_id","total","tins","extras","res","authorization","quantity","reason","reasons","task","relocation_location","relocateItems","pharmacy_batch_id","f","push","getShortName","disposeItems","concat","console","log","$router","join","getFields","id","helpText","type","TT_SELECT","validation","val","required","options","label","condition","_","filter","computedValue","config","showKeyboard","isFilterDataViaApi","dynamicHelpText","TT_FULL_DATE","TT_MULTIPLE_SELECT","requireNext","checked","getItems","items","map","i","isChecked","c","unload","TT_BATCH_MOVEMENT","beforeNext","currentFieldContext","drugsToStr","b","partialEntries","drug","entries","every","Boolean","partialDrugs","formdata","getReasons","TT_TABLE_VIEWER","buildResults","hiddenFooterBtns","isRelocation","columns","rows","j","toStandardHisDisplayFormat","expiry","other","prepDrugs","this","forEach","element","batchNumber","drugID","parseInt","tabs","date","selectAll","listData","l","formatDrugs","mapVal","vals","expiry_date","created","__exports__"],"mappings":"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","file":"js/chunk-2d0d5c2c.f7a29a28.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"activeField\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport HisDate from \"@/utils/Date\";\nimport { StockService } from \"./stock_service\";\nimport { toastWarning, toastDanger, toastSuccess } from \"@/utils/Alerts\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { BadRequestError } from  \"@/services/service\"\nimport { isEmpty } from \"lodash\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: \"\",\n    fields: [] as any,\n    drugs: [] as any,\n    selectedDrugs: [] as any,\n    barcode: \"\",\n    stockService: {} as any,\n  }),\n\n  methods: {\n    async onFinish(formData: any) {\n      const data = formData.enter_batches;\n      let errors: string[] = [];\n      for (let index = 0; index < data.length; index++) {\n        const d = data[index].value;\n        const packSize = StockService.getPackSize(d.drug_id);\n        const total = packSize * d.tins;\n        const extras = {} as any;\n        const res = {\n          'reallocation_code': d.authorization,\n          quantity: total,\n          reason: formData.reasons.value,\n        };\n        try {\n          if (formData.task.value === \"Relocations\") {\n            extras[\"location_id\"] = formData.relocation_location.value;\n            const f = await this.stockService.relocateItems(d.pharmacy_batch_id, {\n              ...res,\n              ...extras,\n            });\n            if (!f) {\n              errors.push(\n                \"Could not save record for\" + StockService.getShortName(d.drug_id)\n              );\n            }\n          } else {\n            const f = await this.stockService.disposeItems(d.pharmacy_batch_id, {\n              ...res,\n              ...extras,\n            });\n            if (!f) {\n              errors.push(\n                \"Could not save record for\" + StockService.getShortName(d.drug_id)\n              );\n            }\n          }\n        } catch (e) {\n          if (e instanceof BadRequestError && !isEmpty(e.errors)) {\n            errors = errors.concat(e.errors)\n          } else {\n            errors.push(e)\n          }\n          console.log(e)\n        }\n      }\n      if (errors.length === 0) {\n        toastSuccess(\"Stock succesfully moved\");\n        this.$router.push(\"/\");\n      } else {\n        toastDanger(`${errors.join(',')}`);\n      }\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"task\",\n          helpText: \"Select task\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Relocations\",\n              value: \"Relocations\",\n            },\n            {\n              label: \"Disposal\",\n              value: \"Disposal\",\n            },\n          ],\n        },\n        {\n          id: \"relocation_location\",\n          helpText: \"Destination\",\n          type: FieldType.TT_SELECT,\n          validation: (val: Option) => Validation.required(val),\n          condition: (val: any) => val.task.value === \"Relocations\",\n          options: (_: any, filter = \"\") => getFacilities(filter),\n          computedValue: (val: Option) => val.label,\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n        },\n        {\n          id: \"date\",\n          dynamicHelpText: (f) => `Date of ${f.task.label}`,\n          helpText: \"Set date\",\n          type: FieldType.TT_FULL_DATE,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"select drugs\",\n          helpText: \"Select drugs\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          requireNext: true,\n          validation: (val: any) => Validation.required(val),\n          options: async (_: any, checked: Option[]) => {\n            const items: Option[] = await this.getItems()\n            return items.map((i: any) => {\n              i.isChecked = checked.filter(c => c.label === i.label).length >= 1 \n              return i\n            })\n          },\n          unload: (val: any) => (this.selectedDrugs = val),\n        },\n        {\n          id: \"enter_batches\",\n          helpText: \"Batch entry\",\n          type: FieldType.TT_BATCH_MOVEMENT,\n          beforeNext: (_: any, f: any, c: any, {currentFieldContext}: any) => {\n            const drugsToStr = (drugs: any) => drugs.map((b: any, i: number) => `${b.label}`).join(' & ')\n            const partialEntries = currentFieldContext.drugs.filter((drug: any) =>\n              drug.entries.map((d: any) => !(d.tins && d.authorization)).every(Boolean)\n            )\n            if (!isEmpty(partialEntries)) {\n              const partialDrugs = drugsToStr(partialEntries)\n              toastWarning(`Please fix partial batch entries for drugs: ${partialDrugs}`)\n              return false\n            }\n            return true\n          },\n          options: () => this.selectedDrugs,\n          validation: (val: any) => Validation.required(val),\n        },\n        {\n          id: \"reasons\",\n          helpText: \"Select reason\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (formdata: any) => this.getReasons(formdata),\n        },\n        {\n          id: \"summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (d: any) => this.buildResults(d),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n      ];\n    },\n    buildResults(formData: any) {\n      const isRelocation = formData.task.value === 'Relocations'\n      const columns = [\n        \"Drug\",\n        \"Total units\",\n        \"Expiry date\",\n        \"Authorization code\",\n      ];\n\n      if (isRelocation) columns.push('Relocation')\n\n      const rows = formData.enter_batches.map((j: any) => {\n        const d = j.value;\n        const data = [\n          StockService.getShortName(d.drug_id),\n          d.tins,\n          HisDate.toStandardHisDisplayFormat(d.expiry),\n          d.authorization\n        ]\n        if (isRelocation) data.push(formData.relocation_location.label)\n        return data\n      });\n      return [\n        {\n          label: \"Confirm entry\",\n          value: \"Table\",\n          other: { columns, rows },\n        },\n      ];\n    },\n    prepDrugs(formdata: any) {\n      const items: any[] = [];\n      const barcode = this.barcode;\n      formdata.enter_batches.value.forEach((element: any) => {\n        items.push({\n          'batch_number': element.batchNumber,\n          'items': [\n            {\n              'barcode': barcode,\n              'drug_id': element.drugID,\n              'expiry_date': element.expiry,\n              'quantity': parseInt(element.tabs) * parseInt(element.tins),\n              'delivery_date': formdata.date.value,\n            },\n          ],\n        });\n      });\n      return items;\n    },\n    selectAll(listData: Array<Option>) {\n      return listData.map((l) => {\n        l.isChecked = true;\n        return l;\n      });\n    },\n    async getItems() {\n      const f = await this.stockService.getItems();\n      return this.formatDrugs(f);\n    },\n    mapVal(vals: string[]) {\n      return vals.map((data) => {\n        return { label: data, value: data };\n      });\n    },\n    getReasons(formdata: any): any {\n      if (formdata.task.value === \"Relocations\") {\n        return this.mapVal([\n          \"Transfer to another facility/relocation\",\n          \"For trainings\",\n        ]);\n      } else {\n        return this.mapVal([\"Expired\", \"Damaged\", \"For trainings\"]);\n      }\n    },\n    formatDrugs(f: any) {\n      return f.map((drug: any) => {\n        return {\n          label: `${StockService.getShortName(\n            drug.drug_id\n          )} (${StockService.getPackSize(\n            drug.drug_id\n          )}) Expiry date: ${HisDate.toStandardHisDisplayFormat(\n            drug.expiry_date\n          )}`,\n          value: drug,\n        };\n      });\n    },\n  },\n  created() {\n    this.stockService = new StockService();\n    this.fields = this.getFields();\n  },\n});\n","import { render } from \"./movement.vue?vue&type=template&id=14bec062&ts=true\"\nimport script from \"./movement.vue?vue&type=script&lang=ts\"\nexport * from \"./movement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}