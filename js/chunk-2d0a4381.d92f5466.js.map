{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?abce","webpack:///./src/apps/CxCa/services/CxCaTreatmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?dae6"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","patientID","providerID","mixins","EncounterMixin","components","HisStandardForm","data","reception","watch","patient","handler","this","getFields","deep","methods","formData","createEncounter","encounter","programID","getProgramID","getProgramWorkflows","workflows","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","state","getLocationName","date","getSessionDate","createState","saveState","buildValueCoded","value","receptionObs","saveObs","nextTask","id","helpText","type","TT_SELECT","validation","val","required","options","mapOptions","__exports__"],"mappings":"yIAEM,SAAUA,EAAOC,EAAMC,EAAQC,EAAQC,EAAQC,EAAOC,GAC1D,IAAMC,EAA+B,8BAAkB,qBAEvD,OAAQ,yBAAc,yBAAaA,EAA8B,CAC/DC,OAAQP,EAAKO,OACbC,eAAgBR,EAAKS,SACrBC,aAAa,EACbC,sBAAuBX,EAAKY,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,0GCR3C,cACI,WAAYC,EAAmBC,G,OAC3B,YAAMD,EAAW,IAAKC,IAAW,KAEzC,OAJsC,oBAItC,EAJA,CAAsC,Q,wBCUvB,+BAAgB,CAC7BC,OAAQ,CAACC,EAAA,MACTC,WAAY,CAAEC,gBAAe,QAC7BC,KAAM,WAAM,MAAC,CACXC,UAAW,KAEbC,MAAO,CACLC,QAAS,CACDC,QAAO,W,oGACXC,KAAKJ,UAAY,IAAI,EACnBI,KAAKX,UACLW,KAAKV,YAEPU,KAAKjB,OAASiB,KAAKC,Y,WAErBC,MAAM,IAGVC,QAAS,CACDlB,SAAN,SAAemB,G,wIACK,SAAMJ,KAAKJ,UAAUS,mB,OAEvC,OAFMC,EAAY,SAEbA,GACCC,EAAY,OAAeC,eACI,GAAM,OAAeC,oBAAoB,OAAeD,kBAFtE,CAAP,EAAO,eAAa,+B,OAgBlB,OAdZE,EAA+B,SAC/BC,EAAQ,GACdD,EAAUE,SAAQ,SAAAC,GAChBA,EAAEC,OAAOF,SAAQ,SAAAG,GACf,IAAMC,EAAYD,EAAEE,0BACdC,EAAcH,EAAEI,QAAQC,cAAc,GAAGC,KAC/CV,EAAMO,GAAeF,QAGnBM,EAAQ,CACZ,YAAe,OAAeC,kBAC9BD,MAAOX,EAAM,sBACba,KAAM,OAAeC,kBAEL,GAAM,OAAeC,YAAY1B,KAAKX,UAAWkB,EAAWe,I,OAC9E,OADMK,EAAY,SACdA,GACEhC,EAAOS,EAAS,oBACD,GAAMJ,KAAKJ,UAAUgC,gBAAgB,6BAA8BjC,EAAKkC,SAFvE,CAAP,EAAO,eAAa,2B,OAIvB,OAFNC,EAAe,SAET,GAAM9B,KAAKJ,UAAUmC,QAAQD,I,cAA7B,SACZ,eAAa,uCACb9B,KAAKgC,W,YAGP/B,UAAA,sBACE,MAAO,CACL,CACEgC,GAAI,mBACJC,SAAU,sBACVC,KAAM,OAAUC,UAChBC,WAAY,SAACC,GAAa,cAAWC,SAAX,IAC1BC,QAAS,WAAM,SAAKC,WAAW,CAC7B,cAAc,OAAO,oBAAoB,iB,qBC/DrD,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASnE,KAErD","file":"js/chunk-2d0a4381.d92f5466.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class TreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 182, providerID) //TODO: Use encounter type reference name'\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport {TreatmentService} from \"@/apps/CxCa/services/CxCaTreatmentService\"\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport {ProgramWorkflow} from \"@/interfaces/program_workflow\"\n\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.reception = new TreatmentService(\n          this.patientID,\n          this.providerID\n        );\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const encounter = await this.reception.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] = await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const flows = {} as any;\n      workflows.forEach(w => {\n        w.states.forEach(f => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        })\n      })\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows['Continue follow-up'],\n        date: ProgramService.getSessionDate()\n      }\n      const saveState = await ProgramService.createState(this.patientID, programID, state);\n      if(!saveState) return toastWarning('Unable to update state')\n      const data = formData['referral_outcome'];\n      const receptionObs = await this.reception.buildValueCoded('Cancer treatment procedure', data.value);\n\n      const obs = await this.reception.saveObs(receptionObs)\n      toastSuccess(\"Observations and encounter created!\");\n      this.nextTask();\n    },\n    \n    getFields(): any {\n      return [\n        {\n          id: \"referral_outcome\",\n          helpText: \"Treatment performed\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.mapOptions([\n            \"Cryotherapy\",\"Leep\",\"Thermocoagulation\",\"Other\"\n          ])\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTreatment.vue?vue&type=template&id=3d43a2f6&ts=true\"\nimport script from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}