{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?05cd","webpack:///./src/apps/CxCa/services/CxCaAssessmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?da0d"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","patientID","providerID","mixins","EncounterMixin","components","HisStandardForm","data","assessment","obs","showHIVQuestions","offerCxCa","watch","patient","handler","setOfferCxCa","getFields","deep","methods","formData","computed","createEncounter","encounter","vals","Object","keys","forEach","element","push","Promise","all","saveObservationList","nextTask","getFirstValueCoded","buildValueCoded","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","value","resultsAvailable","results_available","getFacilities","filter","id","helpText","type","TT_SELECT","validation","val","required","options","label","computedValue","condition","hiv_status","match","minDate","getBirthdate","maxDate","getDate","estimation","allowUnknown","computeValue","date","isEstimate","tag","buildValueDate","this","reason_for_visit","yesNoOptions","_","config","showKeyboard","isFilterDataViaApi","buildValueText","offer_CxCa","unload","screening_method","__exports__"],"mappings":"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","file":"js/chunk-2d226508.8a7756b7.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\r\n\r\nexport class AssessmentService extends AppEncounterService {\r\n    constructor(patientID: number, providerID: number) {\r\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\r\n    }\r\n}","\r\nimport { defineComponent } from \"vue\";\r\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\r\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\r\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\r\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\r\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\r\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\r\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\r\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\r\n\r\nexport default defineComponent({\r\n  mixins: [EncounterMixinVue],\r\n  components: { HisStandardForm },\r\n  data: () => ({\r\n    assessment: {} as any,\r\n    obs: [] as any,\r\n    showHIVQuestions: true,\r\n    offerCxCa: false,\r\n  }),\r\n  watch: {\r\n    patient: {\r\n      async handler() {\r\n        this.assessment = new AssessmentService(\r\n          this.patientID,\r\n          this.providerID\r\n        );\r\n        await this.setOfferCxCa();\r\n        this.fields = await this.getFields();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n  methods: {\r\n    async onFinish(formData: any, computed: any) {\r\n      \r\n      const encounter = await this.assessment.createEncounter();\r\n\r\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\r\n      const vals: any = [];\r\n      Object.keys(computed).forEach(element => {\r\n        vals.push(computed[element].obs);\r\n      });\r\n      const data = await Promise.all([...this.obs, ...vals]);\r\n\r\n      const obs = await this.assessment.saveObservationList(data);\r\n\r\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\r\n\r\n      toastSuccess(\"Observations and encounter created!\");\r\n\r\n      this.nextTask();\r\n    },\r\n    async setOfferCxCa() {\r\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\r\n      this.offerCxCa = data && data === \"Yes\";\r\n      if (!this.offerCxCa) {\r\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\r\n      }\r\n      return true;\r\n    },\r\n    enterPreviousCxCaData(formData: any) {\r\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\r\n      const resultsAvailable = formData.results_available.value === \"Yes\";\r\n      return everHadCxCa && resultsAvailable;\r\n    },\r\n    getFacilities(filter = \"\") {\r\n      return getFacilities(filter);\r\n    },\r\n    getFields(): any {\r\n      return [\r\n        {\r\n          id: \"reason_for_visit\",\r\n          helpText: \"Reason for visit\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          options: () => [\r\n            {\r\n              label: \"Initial screening\",\r\n              value: \"Initial screening\",\r\n            },\r\n            {\r\n              label: \"Postponed treatmment\",\r\n              value: \"Postponed treatment\",\r\n            },\r\n            {\r\n              label: \"One year subsequent check-up after treatment\",\r\n              value: \"One year subsequent check-up after treatment\",\r\n            },\r\n            {\r\n              label: \"Subsequent screening\",\r\n              value: \"Subsequent screening\",\r\n            },\r\n            {\r\n              label: \"Problem visit after treatment\",\r\n              value: \"Problem visit after treatment\",\r\n            },\r\n            {\r\n              label: \"Referral\",\r\n              value: \"Referral\",\r\n            },\r\n          ],\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\r\n          })\r\n        },\r\n        {\r\n          id: \"hiv_status\",\r\n          helpText: \"HIV status\",\r\n          type: FieldType.TT_SELECT,\r\n          condition: () => this.showHIVQuestions,\r\n          validation: (val: any) => Validation.required(val),\r\n          options: () => [\r\n            {\r\n              label: \"Positive on ART\",\r\n              value: \"Positive on ART\",\r\n            },\r\n            {\r\n              label: \"Positive Not on ART\",\r\n              value: \"Positive Not on ART\",\r\n            },\r\n            {\r\n              label: \"Negative\",\r\n              value: \"Negative\",\r\n            },\r\n            {\r\n              label: \"Never tested\",\r\n              value: \"Never tested\",\r\n            },\r\n            {\r\n              label: \"Prefers Not to disclose\",\r\n              value: \"Undisclosed\",\r\n            },\r\n          ],\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\r\n          })\r\n        },\r\n        ...generateDateFields(\r\n          {\r\n            id: \"hiv_test_date\",\r\n            helpText: \"HIV test result date\",\r\n            required: true,\r\n            condition: (formData: any) =>\r\n              formData.hiv_status.value.match(/Negative|ART/i),\r\n            minDate: () => this.patient.getBirthdate(),\r\n            maxDate: () => this.assessment.getDate(),\r\n            estimation: {\r\n              allowUnknown: false,\r\n            },\r\n            computeValue: (date: string, isEstimate: boolean) => {\r\n              return {\r\n                date,\r\n                tag: \"cxca screening\",\r\n                isEstimate,\r\n                obs: this.assessment.buildValueDate(\"HIV test date\", date),\r\n              };\r\n            },\r\n          },\r\n          this.assessment.getDate()\r\n        ),\r\n        {\r\n          id: \"ever_had_cxca\",\r\n          helpText: \"Ever had CxCa screening\",\r\n          type: FieldType.TT_SELECT,\r\n          condition: (formData: any) =>\r\n            formData.reason_for_visit.value !== \"Initial screening\",\r\n          options: () => this.yesNoOptions(),\r\n          validation: (val: any) => Validation.required(val),\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\r\n          })\r\n        },\r\n        {\r\n          id: \"results_available\",\r\n          helpText: \"Results available?\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          \r\n          condition: (formData: any) =>\r\n            formData.reason_for_visit.value !== \"Initial screening\",\r\n          options: () => this.yesNoOptions(),\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\r\n          })\r\n        },\r\n        {\r\n          id: \"location\",\r\n          helpText: \"CxCa screening location\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\r\n          config: {\r\n            showKeyboard: true,\r\n            isFilterDataViaApi: true,\r\n          },\r\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\r\n          })\r\n        },\r\n        ...generateDateFields(\r\n          {\r\n            id: \"cxca_date\",\r\n            helpText: \"Previous CxCa test\",\r\n            required: true,\r\n            minDate: () => this.patient.getBirthdate(),\r\n            maxDate: () => this.assessment.getDate(),\r\n            estimation: {\r\n              allowUnknown: false,\r\n            },\r\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\r\n            computeValue: (date: string, isEstimate: boolean) => {\r\n              return {\r\n                date,\r\n                tag: \"cxca screening\",\r\n                isEstimate,\r\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\r\n              };\r\n            },\r\n          },\r\n          this.assessment.getDate()\r\n        ),\r\n        {\r\n          id: \"previous_screening_method\",\r\n          helpText: \"Previous screening method\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\r\n          options: () => [\r\n            {\r\n              label: \"VIA\",\r\n              value: \"VIA\",\r\n            },\r\n            {\r\n              label: \"PAP Smear\",\r\n              value: \"PAP Smear\",\r\n            },\r\n            {\r\n              label: \"HPV DNA\",\r\n              value: \"HPV DNA\",\r\n            },\r\n            {\r\n              label: \"Speculum Exam\",\r\n              value: \"Speculum Exam\",\r\n            },\r\n          ],\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\r\n          })\r\n        },\r\n        {\r\n          id: \"offer_CxCa\",\r\n          helpText: \"Offer CxCa screening today\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          options: () => this.yesNoOptions(),\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\r\n          })\r\n        },\r\n        {\r\n          id: \"screening_method\",\r\n          helpText: \"Screening method being offered\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\r\n          options: () => [\r\n            {\r\n              label: \"VIA\",\r\n              value: \"VIA\",\r\n            },\r\n            {\r\n              label: \"PAP Smear\",\r\n              value: \"PAP Smear\",\r\n            },\r\n            {\r\n              label: \"HPV DNA\",\r\n              value: \"HPV DNA\",\r\n            },\r\n            {\r\n              label: \"Speculum Exam\",\r\n              value: \"Speculum Exam\",\r\n            },\r\n          ],\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\r\n          }),\r\n          unload: async (value: any) => {\r\n            if (value.value === \"VIA\") {\r\n              this.obs.push(\r\n                this.assessment.buildValueCoded(\r\n                  \"Waiting for test results\",\r\n                  \"No\"\r\n                )\r\n              );\r\n            }\r\n          },\r\n        },\r\n        {\r\n          id: \"waiting_for_lab_tests\",\r\n          helpText: \"Waiting for lab results\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          condition: (formData: any) =>\r\n            !formData.screening_method.value.match(/VIA|EXAM/i),\r\n          options: () => this.yesNoOptions(),\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"Waiting for test results\", value.value)\r\n          }),\r\n        },\r\n        {\r\n          id: \"reason_for_no_cxca\",\r\n          helpText: \"Reason for NOT offering CxCa screening\",\r\n          type: FieldType.TT_SELECT,\r\n          validation: (val: any) => Validation.required(val),\r\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\r\n          options: () => [\r\n            {\r\n              label: \"Client preferred counselling\",\r\n              value: \"Preferred counseling\",\r\n            },\r\n            {\r\n              label: \"Not applicable\",\r\n              value: \"Not applicable\",\r\n            },\r\n          ],\r\n          computedValue: (value: any) => ({\r\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\r\n          }),\r\n        },\r\n      ];\r\n    },\r\n  },\r\n});\r\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=3e6acfeb&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"C:\\\\Users\\\\msuleman\\\\projects\\\\HIS-Core\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}