{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.find.js","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue?99e7","webpack:///./src/apps/OPD/services/patient_diagnosis_service.ts","webpack:///./src/apps/OPD/services/clinical_notes_service.ts","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue","webpack:///./src/apps/OPD/views/encounters/Diagnosis.vue?0b28"],"names":["$","$find","find","addToUnscopables","arrayMethodUsesToLength","FIND","SKIPS_HOLES","USES_TO_LENGTH","Array","target","proto","forced","callbackfn","this","arguments","length","undefined","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","patientID","providerID","conceptSetId","getConceptID","getJson","id","patientId","getFirstValueCoded","malariaTestResult","getFirstValueText","components","HisStandardForm","mixins","EncounterMixin","data","activeField","notesService","diagnosisList","diagnosisService","watch","ready","handler","isReady","getMalariaTestResult","getDiagnosis","getFields","immediate","deep","methods","formData","computedData","createEncounter","resolveObs","diagnosisData","saveObservationList","notesData","nextTask","mapListToOptions","list","map","item","label","name","value","other","concept_id","sort","a","b","checkMalariaResult","malaria","o","helpText","type","TT_MULTIPLE_SELECT","validation","validateSeries","required","options","computedValue","tag","obs","buildValueCodedFromConceptId","summaryMapValue","config","showKeyboard","TT_TEXT","buildValueText","__exports__"],"mappings":"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","file":"js/chunk-6c1c8555.5b87ad06.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $find = require('../internals/array-iteration').find;\nvar addToUnscopables = require('../internals/add-to-unscopables');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar FIND = 'find';\nvar SKIPS_HOLES = true;\n\nvar USES_TO_LENGTH = arrayMethodUsesToLength(FIND);\n\n// Shouldn't skip holes\nif (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });\n\n// `Array.prototype.find` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.find\n$({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables(FIND);\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ConceptService } from '@/services/concept_service';\n\nexport class PatientDiagnosisService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 8, providerID) \n    }\n\n    static async getDiagnosis() {\n        const conceptSetId = ConceptService.getConceptID('Qech outpatient diagnosis list')\n        return AppEncounterService.getJson('concept_set', {\n            id: conceptSetId\n        })\n    }\n\n    static async getMalariaTestResult(patientId: number) {\n        let malariaTestResult = await AppEncounterService.getFirstValueCoded(patientId, 'Malaria Test Result')   \n        if(malariaTestResult) return malariaTestResult\n\n        malariaTestResult = await AppEncounterService.getFirstValueText(patientId, 'Malaria Test Result')\n        if(malariaTestResult) return malariaTestResult\n\n        return null\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicalNotesService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 105, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientDiagnosisService } from \"@/apps/OPD/services/patient_diagnosis_service\"\nimport { ClinicalNotesService } from \"@/apps/OPD/services/clinical_notes_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { isEmpty } from 'lodash';\nimport { ConceptName } from '@/interfaces/conceptName';\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    activeField: '',\n    notesService: {} as any,\n    diagnosisList: [] as Array<any>,\n    diagnosisService: {} as any,\n    malariaTestResult: null as null | string\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.malariaTestResult = await PatientDiagnosisService.getMalariaTestResult(this.patientID)  \n          this.notesService = new ClinicalNotesService(this.patientID, this.providerID)\n          this.diagnosisService = new PatientDiagnosisService(this.patientID, this.providerID)\n          this.diagnosisList = await PatientDiagnosisService.getDiagnosis()\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(formData: any, computedData: any){   \n      await this.diagnosisService.createEncounter()\n      await this.notesService.createEncounter()\n      \n      const diagnosisData = await this.resolveObs({...computedData}, 'diagnosis')      \n      await this.diagnosisService.saveObservationList(diagnosisData)\n\n      const notesData = await this.resolveObs({...computedData}, 'notes')\n      await this.notesService.saveObservationList(notesData)\n\n      this.nextTask()        \n    },\n    mapListToOptions(list: ConceptName[]){\n      if(isEmpty(list)) return []\n\n      return list.map(item => ({\n        label: item.name, value: item.name, other: item.concept_id\n      })).sort((a, b) => a.label < b.label ? -1 : a.label > b.label ? 1 : 0)\n    },\n    checkMalariaResult(data: Array<any>){\n      const malaria = data.find(o => o.label === 'Malaria')      \n      if(malaria) {\n        if(!this.malariaTestResult) return ['No malaria test result found']\n        if(this.malariaTestResult === 'Negative') return [`Negative malaria test results detected`]\n      }\n      return null\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'primary_diagnosis',\n          helpText: 'Select primary diagnosis',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => this.validateSeries([\n            () => Validation.required(data),\n            () => this.checkMalariaResult(data)\n          ]),\n          options: () => this.mapListToOptions(this.diagnosisList),\n          computedValue: (options: Array<Option>) => ({\n            tag: 'diagnosis',\n            obs: options.map(({other}) => \n              this.diagnosisService.buildValueCodedFromConceptId('Primary diagnosis', other))\n          }),\n          summaryMapValue: ({ value }: Option) => ({\n            value,\n            label: \"Primary diagnosis\"\n          }),\n          config: {\n            showKeyboard: true,\n          }\n        },\n        {\n          id: 'secondary_diagnosis',\n          helpText: 'Select secondary diagnosis',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          options: () => this.mapListToOptions(this.diagnosisList),\n          validation: (data: any) => this.checkMalariaResult(data),\n          computedValue: (options: Array<Option>) => ({\n            tag: 'diagnosis',\n            obs: options.map(({other}) => \n              this.diagnosisService.buildValueCodedFromConceptId('Secondary diagnosis', other))\n          }),\n          summaryMapValue: ({ value }: Option) => ({\n            value,\n            label: \"Secondary diagnosis\"\n          }),\n          config: {\n            showKeyboard: true,\n          }\n        },\n        {\n          id: 'clinical_notes',\n          helpText: 'Clinical notes',\n          type: FieldType.TT_TEXT,\n          computedValue: ({value}: Option) => ({\n            tag: 'notes',\n            obs: this.notesService.buildValueText('Clinical notes construct', value)\n          })\n        },\n      ]\n    }\n  }\n})\n","import { render } from \"./Diagnosis.vue?vue&type=template&id=f4f614fa&ts=true\"\nimport script from \"./Diagnosis.vue?vue&type=script&lang=ts\"\nexport * from \"./Diagnosis.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}